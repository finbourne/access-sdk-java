/*
 * FINBOURNE Access Management API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.access.api;

import com.finbourne.access.ApiCallback;
import com.finbourne.access.ApiClient;
import com.finbourne.access.ApiException;
import com.finbourne.access.ApiResponse;
import com.finbourne.access.Configuration;
import com.finbourne.access.Pair;
import com.finbourne.access.ProgressRequestBody;
import com.finbourne.access.ProgressResponseBody;
import com.finbourne.access.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.access.model.AddToPolicyCollectionRequest;
import com.finbourne.access.model.AttachedPolicyDefinitionResponse;
import com.finbourne.access.model.EvaluationRequest;
import com.finbourne.access.model.EvaluationResponse;
import com.finbourne.access.model.LusidProblemDetails;
import com.finbourne.access.model.LusidValidationProblemDetails;
import com.finbourne.access.model.PolicyCollectionCreationRequest;
import com.finbourne.access.model.PolicyCollectionResponse;
import com.finbourne.access.model.PolicyCollectionUpdateRequest;
import com.finbourne.access.model.PolicyCreationRequest;
import com.finbourne.access.model.PolicyResponse;
import com.finbourne.access.model.PolicyUpdateRequest;
import com.finbourne.access.model.RemoveFromPolicyCollectionRequest;
import com.finbourne.access.model.ResourceListOfPolicyCollectionResponse;
import com.finbourne.access.model.ResourceListOfPolicyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addToPolicyCollectionCall(String code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, String scope, final ApiCallback _callback) throws ApiException {
        return addToPolicyCollectionCall(code, addToPolicyCollectionRequest, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call addToPolicyCollectionCall(String code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addToPolicyCollectionRequest;

        // create path and map variables
        String localVarPath = "/api/policycollections/{code}/add"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToPolicyCollectionValidateBeforeCall(String code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling addToPolicyCollection(Async)");
        }

        // verify the required parameter 'addToPolicyCollectionRequest' is set
        if (addToPolicyCollectionRequest == null) {
            throw new ApiException("Missing the required parameter 'addToPolicyCollectionRequest' when calling addToPolicyCollection(Async)");
        }

        return addToPolicyCollectionCall(code, addToPolicyCollectionRequest, scope, _callback, opts);

    }


    private ApiResponse<PolicyCollectionResponse> addToPolicyCollectionWithHttpInfo(String code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, String scope) throws ApiException {
        okhttp3.Call localVarCall = addToPolicyCollectionValidateBeforeCall(code, addToPolicyCollectionRequest, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PolicyCollectionResponse> addToPolicyCollectionWithHttpInfo(String code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = addToPolicyCollectionValidateBeforeCall(code, addToPolicyCollectionRequest, scope, null, opts);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addToPolicyCollectionAsync(String code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, String scope, final ApiCallback<PolicyCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToPolicyCollectionValidateBeforeCall(code, addToPolicyCollectionRequest, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call addToPolicyCollectionAsync(String code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, String scope, final ApiCallback<PolicyCollectionResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = addToPolicyCollectionValidateBeforeCall(code, addToPolicyCollectionRequest, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIaddToPolicyCollectionRequest {
        private final String code;
        private final AddToPolicyCollectionRequest addToPolicyCollectionRequest;
        private String scope;

        private APIaddToPolicyCollectionRequest(String code, AddToPolicyCollectionRequest addToPolicyCollectionRequest) {
            this.code = code;
            this.addToPolicyCollectionRequest = addToPolicyCollectionRequest;
        }

        /**
         * Set scope
         * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
         * @return APIaddToPolicyCollectionRequest
         */
        public APIaddToPolicyCollectionRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for addToPolicyCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addToPolicyCollectionCall(code, addToPolicyCollectionRequest, scope, _callback);
        }

        /**
         * Execute addToPolicyCollection request
         * @return PolicyCollectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyCollectionResponse execute() throws ApiException {
            ApiResponse<PolicyCollectionResponse> localVarResp = addToPolicyCollectionWithHttpInfo(code, addToPolicyCollectionRequest, scope);
            return localVarResp.getData();
        }

        /**
         * Execute addToPolicyCollection request. Use any specified configuration options to override any other configuration for this request only.
         * @return PolicyCollectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyCollectionResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PolicyCollectionResponse> localVarResp = addToPolicyCollectionWithHttpInfo(code, addToPolicyCollectionRequest, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute addToPolicyCollection request with HTTP info returned
         * @return ApiResponse&lt;PolicyCollectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyCollectionResponse> executeWithHttpInfo() throws ApiException {
            return addToPolicyCollectionWithHttpInfo(code, addToPolicyCollectionRequest, scope);
        }

        /**
         * Execute addToPolicyCollection request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PolicyCollectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyCollectionResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return addToPolicyCollectionWithHttpInfo(code, addToPolicyCollectionRequest, scope, opts);
        }

        /**
         * Execute addToPolicyCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyCollectionResponse> _callback) throws ApiException {
            return addToPolicyCollectionAsync(code, addToPolicyCollectionRequest, scope, _callback);
        }

        /**
         * Execute addToPolicyCollection request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyCollectionResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return addToPolicyCollectionAsync(code, addToPolicyCollectionRequest, scope, _callback, opts);
        }
    }

    /**
     * AddToPolicyCollection: Add To PolicyCollection
     * Add Policies and/or PolicyCollections to a PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param addToPolicyCollectionRequest Ids of the PolicyCollections and/or Policies to add to the PolicyCollection (required)
     * @return APIaddToPolicyCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIaddToPolicyCollectionRequest addToPolicyCollection(String code, AddToPolicyCollectionRequest addToPolicyCollectionRequest) {
        return new APIaddToPolicyCollectionRequest(code, addToPolicyCollectionRequest);
    }
    private okhttp3.Call createPolicyCall(PolicyCreationRequest policyCreationRequest, final ApiCallback _callback) throws ApiException {
        return createPolicyCall(policyCreationRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createPolicyCall(PolicyCreationRequest policyCreationRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policyCreationRequest;

        // create path and map variables
        String localVarPath = "/api/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPolicyValidateBeforeCall(PolicyCreationRequest policyCreationRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'policyCreationRequest' is set
        if (policyCreationRequest == null) {
            throw new ApiException("Missing the required parameter 'policyCreationRequest' when calling createPolicy(Async)");
        }

        return createPolicyCall(policyCreationRequest, _callback, opts);

    }


    private ApiResponse<PolicyResponse> createPolicyWithHttpInfo(PolicyCreationRequest policyCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(policyCreationRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PolicyResponse> createPolicyWithHttpInfo(PolicyCreationRequest policyCreationRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(policyCreationRequest, null, opts);
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPolicyAsync(PolicyCreationRequest policyCreationRequest, final ApiCallback<PolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(policyCreationRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createPolicyAsync(PolicyCreationRequest policyCreationRequest, final ApiCallback<PolicyResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(policyCreationRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreatePolicyRequest {
        private final PolicyCreationRequest policyCreationRequest;

        private APIcreatePolicyRequest(PolicyCreationRequest policyCreationRequest) {
            this.policyCreationRequest = policyCreationRequest;
        }

        /**
         * Build call for createPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createPolicyCall(policyCreationRequest, _callback);
        }

        /**
         * Execute createPolicy request
         * @return PolicyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyResponse execute() throws ApiException {
            ApiResponse<PolicyResponse> localVarResp = createPolicyWithHttpInfo(policyCreationRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createPolicy request. Use any specified configuration options to override any other configuration for this request only.
         * @return PolicyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PolicyResponse> localVarResp = createPolicyWithHttpInfo(policyCreationRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createPolicy request with HTTP info returned
         * @return ApiResponse&lt;PolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyResponse> executeWithHttpInfo() throws ApiException {
            return createPolicyWithHttpInfo(policyCreationRequest);
        }

        /**
         * Execute createPolicy request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createPolicyWithHttpInfo(policyCreationRequest, opts);
        }

        /**
         * Execute createPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyResponse> _callback) throws ApiException {
            return createPolicyAsync(policyCreationRequest, _callback);
        }

        /**
         * Execute createPolicy request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return createPolicyAsync(policyCreationRequest, _callback, opts);
        }
    }

    /**
     * CreatePolicy: Create Policy
     * Creates a Policy
     * @param policyCreationRequest The definition of the Policy (required)
     * @return APIcreatePolicyRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreatePolicyRequest createPolicy(PolicyCreationRequest policyCreationRequest) {
        return new APIcreatePolicyRequest(policyCreationRequest);
    }
    private okhttp3.Call createPolicyCollectionCall(PolicyCollectionCreationRequest policyCollectionCreationRequest, final ApiCallback _callback) throws ApiException {
        return createPolicyCollectionCall(policyCollectionCreationRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createPolicyCollectionCall(PolicyCollectionCreationRequest policyCollectionCreationRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policyCollectionCreationRequest;

        // create path and map variables
        String localVarPath = "/api/policycollections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPolicyCollectionValidateBeforeCall(PolicyCollectionCreationRequest policyCollectionCreationRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'policyCollectionCreationRequest' is set
        if (policyCollectionCreationRequest == null) {
            throw new ApiException("Missing the required parameter 'policyCollectionCreationRequest' when calling createPolicyCollection(Async)");
        }

        return createPolicyCollectionCall(policyCollectionCreationRequest, _callback, opts);

    }


    private ApiResponse<PolicyCollectionResponse> createPolicyCollectionWithHttpInfo(PolicyCollectionCreationRequest policyCollectionCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createPolicyCollectionValidateBeforeCall(policyCollectionCreationRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PolicyCollectionResponse> createPolicyCollectionWithHttpInfo(PolicyCollectionCreationRequest policyCollectionCreationRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createPolicyCollectionValidateBeforeCall(policyCollectionCreationRequest, null, opts);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPolicyCollectionAsync(PolicyCollectionCreationRequest policyCollectionCreationRequest, final ApiCallback<PolicyCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPolicyCollectionValidateBeforeCall(policyCollectionCreationRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createPolicyCollectionAsync(PolicyCollectionCreationRequest policyCollectionCreationRequest, final ApiCallback<PolicyCollectionResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createPolicyCollectionValidateBeforeCall(policyCollectionCreationRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreatePolicyCollectionRequest {
        private final PolicyCollectionCreationRequest policyCollectionCreationRequest;

        private APIcreatePolicyCollectionRequest(PolicyCollectionCreationRequest policyCollectionCreationRequest) {
            this.policyCollectionCreationRequest = policyCollectionCreationRequest;
        }

        /**
         * Build call for createPolicyCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createPolicyCollectionCall(policyCollectionCreationRequest, _callback);
        }

        /**
         * Execute createPolicyCollection request
         * @return PolicyCollectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyCollectionResponse execute() throws ApiException {
            ApiResponse<PolicyCollectionResponse> localVarResp = createPolicyCollectionWithHttpInfo(policyCollectionCreationRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createPolicyCollection request. Use any specified configuration options to override any other configuration for this request only.
         * @return PolicyCollectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyCollectionResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PolicyCollectionResponse> localVarResp = createPolicyCollectionWithHttpInfo(policyCollectionCreationRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createPolicyCollection request with HTTP info returned
         * @return ApiResponse&lt;PolicyCollectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyCollectionResponse> executeWithHttpInfo() throws ApiException {
            return createPolicyCollectionWithHttpInfo(policyCollectionCreationRequest);
        }

        /**
         * Execute createPolicyCollection request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PolicyCollectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyCollectionResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createPolicyCollectionWithHttpInfo(policyCollectionCreationRequest, opts);
        }

        /**
         * Execute createPolicyCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyCollectionResponse> _callback) throws ApiException {
            return createPolicyCollectionAsync(policyCollectionCreationRequest, _callback);
        }

        /**
         * Execute createPolicyCollection request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyCollectionResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return createPolicyCollectionAsync(policyCollectionCreationRequest, _callback, opts);
        }
    }

    /**
     * CreatePolicyCollection: Create PolicyCollection
     * Creates a PolicyCollection
     * @param policyCollectionCreationRequest The definition of the PolicyCollection (required)
     * @return APIcreatePolicyCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreatePolicyCollectionRequest createPolicyCollection(PolicyCollectionCreationRequest policyCollectionCreationRequest) {
        return new APIcreatePolicyCollectionRequest(policyCollectionCreationRequest);
    }
    private okhttp3.Call deletePolicyCall(String code, String scope, final ApiCallback _callback) throws ApiException {
        return deletePolicyCall(code, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deletePolicyCall(String code, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policies/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePolicyValidateBeforeCall(String code, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deletePolicy(Async)");
        }

        return deletePolicyCall(code, scope, _callback, opts);

    }


    private ApiResponse<Void> deletePolicyWithHttpInfo(String code, String scope) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(code, scope, null, new ConfigurationOptions());
        return localVarApiClient.execute(localVarCall);
    }

    private ApiResponse<Void> deletePolicyWithHttpInfo(String code, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(code, scope, null, opts);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePolicyAsync(String code, String scope, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(code, scope, _callback, new ConfigurationOptions());
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    private okhttp3.Call deletePolicyAsync(String code, String scope, final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(code, scope, _callback, opts);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeletePolicyRequest {
        private final String code;
        private String scope;

        private APIdeletePolicyRequest(String code) {
            this.code = code;
        }

        /**
         * Set scope
         * @param scope Optional. Will use the default scope if not provided. The scope of the Policy (optional)
         * @return APIdeletePolicyRequest
         */
        public APIdeletePolicyRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for deletePolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePolicyCall(code, scope, _callback);
        }

        /**
         * Execute deletePolicy request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePolicyWithHttpInfo(code, scope);
        }

        /**
         * Execute deletePolicy request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute(ConfigurationOptions opts) throws ApiException {
            deletePolicyWithHttpInfo(code, scope, opts);
        }

        /**
         * Execute deletePolicy request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePolicyWithHttpInfo(code, scope);
        }

        /**
         * Execute deletePolicy request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deletePolicyWithHttpInfo(code, scope, opts);
        }

        /**
         * Execute deletePolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePolicyAsync(code, scope, _callback);
        }

        /**
         * Execute deletePolicy request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {
            return deletePolicyAsync(code, scope, _callback, opts);
        }
    }

    /**
     * DeletePolicy: Delete Policy
     * Deletes an identified Policy
     * @param code The code of the Policy (required)
     * @return APIdeletePolicyRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeletePolicyRequest deletePolicy(String code) {
        return new APIdeletePolicyRequest(code);
    }
    private okhttp3.Call deletePolicyCollectionCall(String code, String scope, final ApiCallback _callback) throws ApiException {
        return deletePolicyCollectionCall(code, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deletePolicyCollectionCall(String code, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policycollections/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePolicyCollectionValidateBeforeCall(String code, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deletePolicyCollection(Async)");
        }

        return deletePolicyCollectionCall(code, scope, _callback, opts);

    }


    private ApiResponse<Void> deletePolicyCollectionWithHttpInfo(String code, String scope) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyCollectionValidateBeforeCall(code, scope, null, new ConfigurationOptions());
        return localVarApiClient.execute(localVarCall);
    }

    private ApiResponse<Void> deletePolicyCollectionWithHttpInfo(String code, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyCollectionValidateBeforeCall(code, scope, null, opts);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePolicyCollectionAsync(String code, String scope, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePolicyCollectionValidateBeforeCall(code, scope, _callback, new ConfigurationOptions());
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    private okhttp3.Call deletePolicyCollectionAsync(String code, String scope, final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deletePolicyCollectionValidateBeforeCall(code, scope, _callback, opts);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeletePolicyCollectionRequest {
        private final String code;
        private String scope;

        private APIdeletePolicyCollectionRequest(String code) {
            this.code = code;
        }

        /**
         * Set scope
         * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
         * @return APIdeletePolicyCollectionRequest
         */
        public APIdeletePolicyCollectionRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for deletePolicyCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePolicyCollectionCall(code, scope, _callback);
        }

        /**
         * Execute deletePolicyCollection request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePolicyCollectionWithHttpInfo(code, scope);
        }

        /**
         * Execute deletePolicyCollection request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute(ConfigurationOptions opts) throws ApiException {
            deletePolicyCollectionWithHttpInfo(code, scope, opts);
        }

        /**
         * Execute deletePolicyCollection request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePolicyCollectionWithHttpInfo(code, scope);
        }

        /**
         * Execute deletePolicyCollection request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deletePolicyCollectionWithHttpInfo(code, scope, opts);
        }

        /**
         * Execute deletePolicyCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePolicyCollectionAsync(code, scope, _callback);
        }

        /**
         * Execute deletePolicyCollection request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {
            return deletePolicyCollectionAsync(code, scope, _callback, opts);
        }
    }

    /**
     * DeletePolicyCollection: Delete PolicyCollection
     * Deletes an identified PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @return APIdeletePolicyCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeletePolicyCollectionRequest deletePolicyCollection(String code) {
        return new APIdeletePolicyCollectionRequest(code);
    }
    private okhttp3.Call evaluateCall(Map<String, EvaluationRequest> requestBody, List<String> applications, final ApiCallback _callback) throws ApiException {
        return evaluateCall(requestBody, applications,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call evaluateCall(Map<String, EvaluationRequest> requestBody, List<String> applications, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applications != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "applications", applications));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call evaluateValidateBeforeCall(Map<String, EvaluationRequest> requestBody, List<String> applications, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling evaluate(Async)");
        }

        return evaluateCall(requestBody, applications, _callback, opts);

    }


    private ApiResponse<Map<String, EvaluationResponse>> evaluateWithHttpInfo(Map<String, EvaluationRequest> requestBody, List<String> applications) throws ApiException {
        okhttp3.Call localVarCall = evaluateValidateBeforeCall(requestBody, applications, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Map<String, EvaluationResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Map<String, EvaluationResponse>> evaluateWithHttpInfo(Map<String, EvaluationRequest> requestBody, List<String> applications, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = evaluateValidateBeforeCall(requestBody, applications, null, opts);
        Type localVarReturnType = new TypeToken<Map<String, EvaluationResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call evaluateAsync(Map<String, EvaluationRequest> requestBody, List<String> applications, final ApiCallback<Map<String, EvaluationResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = evaluateValidateBeforeCall(requestBody, applications, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Map<String, EvaluationResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call evaluateAsync(Map<String, EvaluationRequest> requestBody, List<String> applications, final ApiCallback<Map<String, EvaluationResponse>> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = evaluateValidateBeforeCall(requestBody, applications, _callback, opts);
        Type localVarReturnType = new TypeToken<Map<String, EvaluationResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIevaluateRequest {
        private final Map<String, EvaluationRequest> requestBody;
        private List<String> applications;

        private APIevaluateRequest(Map<String, EvaluationRequest> requestBody) {
            this.requestBody = requestBody;
        }

        /**
         * Set applications
         * @param applications Optional. The application type of the roles and policies to use when evaluating. (optional)
         * @return APIevaluateRequest
         */
        public APIevaluateRequest applications(List<String> applications) {
            this.applications = applications;
            return this;
        }

        /**
         * Build call for evaluate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Run an evaluation against the current user&#39;s entitlements </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return evaluateCall(requestBody, applications, _callback);
        }

        /**
         * Execute evaluate request
         * @return Map&lt;String, EvaluationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Run an evaluation against the current user&#39;s entitlements </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, EvaluationResponse> execute() throws ApiException {
            ApiResponse<Map<String, EvaluationResponse>> localVarResp = evaluateWithHttpInfo(requestBody, applications);
            return localVarResp.getData();
        }

        /**
         * Execute evaluate request. Use any specified configuration options to override any other configuration for this request only.
         * @return Map&lt;String, EvaluationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Run an evaluation against the current user&#39;s entitlements </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, EvaluationResponse> execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Map<String, EvaluationResponse>> localVarResp = evaluateWithHttpInfo(requestBody, applications, opts);
            return localVarResp.getData();
        }

        /**
         * Execute evaluate request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, EvaluationResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Run an evaluation against the current user&#39;s entitlements </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, EvaluationResponse>> executeWithHttpInfo() throws ApiException {
            return evaluateWithHttpInfo(requestBody, applications);
        }

        /**
         * Execute evaluate request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Map&lt;String, EvaluationResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Run an evaluation against the current user&#39;s entitlements </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, EvaluationResponse>> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return evaluateWithHttpInfo(requestBody, applications, opts);
        }

        /**
         * Execute evaluate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Run an evaluation against the current user&#39;s entitlements </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, EvaluationResponse>> _callback) throws ApiException {
            return evaluateAsync(requestBody, applications, _callback);
        }

        /**
         * Execute evaluate request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Run an evaluation against the current user&#39;s entitlements </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, EvaluationResponse>> _callback, ConfigurationOptions opts) throws ApiException {
            return evaluateAsync(requestBody, applications, _callback, opts);
        }
    }

    /**
     * Evaluate: Run one or more evaluations
     * Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
     * @param requestBody A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation). (required)
     * @return APIevaluateRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run an evaluation against the current user&#39;s entitlements </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIevaluateRequest evaluate(Map<String, EvaluationRequest> requestBody) {
        return new APIevaluateRequest(requestBody);
    }
    private okhttp3.Call getOwnPoliciesCall(List<String> applications, final ApiCallback _callback) throws ApiException {
        return getOwnPoliciesCall(applications,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getOwnPoliciesCall(List<String> applications, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applications != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "applications", applications));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOwnPoliciesValidateBeforeCall(List<String> applications, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return getOwnPoliciesCall(applications, _callback, opts);

    }


    private ApiResponse<List<AttachedPolicyDefinitionResponse>> getOwnPoliciesWithHttpInfo(List<String> applications) throws ApiException {
        okhttp3.Call localVarCall = getOwnPoliciesValidateBeforeCall(applications, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<List<AttachedPolicyDefinitionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<List<AttachedPolicyDefinitionResponse>> getOwnPoliciesWithHttpInfo(List<String> applications, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getOwnPoliciesValidateBeforeCall(applications, null, opts);
        Type localVarReturnType = new TypeToken<List<AttachedPolicyDefinitionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOwnPoliciesAsync(List<String> applications, final ApiCallback<List<AttachedPolicyDefinitionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOwnPoliciesValidateBeforeCall(applications, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<List<AttachedPolicyDefinitionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getOwnPoliciesAsync(List<String> applications, final ApiCallback<List<AttachedPolicyDefinitionResponse>> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getOwnPoliciesValidateBeforeCall(applications, _callback, opts);
        Type localVarReturnType = new TypeToken<List<AttachedPolicyDefinitionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetOwnPoliciesRequest {
        private List<String> applications;

        private APIgetOwnPoliciesRequest() {
        }

        /**
         * Set applications
         * @param applications Optional. Filter on the applications that the policies apply to (optional)
         * @return APIgetOwnPoliciesRequest
         */
        public APIgetOwnPoliciesRequest applications(List<String> applications) {
            this.applications = applications;
            return this;
        }

        /**
         * Build call for getOwnPolicies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get policies and licences of current user </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOwnPoliciesCall(applications, _callback);
        }

        /**
         * Execute getOwnPolicies request
         * @return List&lt;AttachedPolicyDefinitionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get policies and licences of current user </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<AttachedPolicyDefinitionResponse> execute() throws ApiException {
            ApiResponse<List<AttachedPolicyDefinitionResponse>> localVarResp = getOwnPoliciesWithHttpInfo(applications);
            return localVarResp.getData();
        }

        /**
         * Execute getOwnPolicies request. Use any specified configuration options to override any other configuration for this request only.
         * @return List&lt;AttachedPolicyDefinitionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get policies and licences of current user </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<AttachedPolicyDefinitionResponse> execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<List<AttachedPolicyDefinitionResponse>> localVarResp = getOwnPoliciesWithHttpInfo(applications, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getOwnPolicies request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AttachedPolicyDefinitionResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get policies and licences of current user </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AttachedPolicyDefinitionResponse>> executeWithHttpInfo() throws ApiException {
            return getOwnPoliciesWithHttpInfo(applications);
        }

        /**
         * Execute getOwnPolicies request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;List&lt;AttachedPolicyDefinitionResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get policies and licences of current user </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AttachedPolicyDefinitionResponse>> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getOwnPoliciesWithHttpInfo(applications, opts);
        }

        /**
         * Execute getOwnPolicies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get policies and licences of current user </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AttachedPolicyDefinitionResponse>> _callback) throws ApiException {
            return getOwnPoliciesAsync(applications, _callback);
        }

        /**
         * Execute getOwnPolicies request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get policies and licences of current user </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AttachedPolicyDefinitionResponse>> _callback, ConfigurationOptions opts) throws ApiException {
            return getOwnPoliciesAsync(applications, _callback, opts);
        }
    }

    /**
     * GetOwnPolicies: Get policies of requesting user
     * Gets all Policies for the current user
     * @return APIgetOwnPoliciesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get policies and licences of current user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetOwnPoliciesRequest getOwnPolicies() {
        return new APIgetOwnPoliciesRequest();
    }
    private okhttp3.Call getPolicyCall(String code, String scope, final ApiCallback _callback) throws ApiException {
        return getPolicyCall(code, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getPolicyCall(String code, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policies/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyValidateBeforeCall(String code, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getPolicy(Async)");
        }

        return getPolicyCall(code, scope, _callback, opts);

    }


    private ApiResponse<PolicyResponse> getPolicyWithHttpInfo(String code, String scope) throws ApiException {
        okhttp3.Call localVarCall = getPolicyValidateBeforeCall(code, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PolicyResponse> getPolicyWithHttpInfo(String code, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getPolicyValidateBeforeCall(code, scope, null, opts);
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPolicyAsync(String code, String scope, final ApiCallback<PolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPolicyValidateBeforeCall(code, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getPolicyAsync(String code, String scope, final ApiCallback<PolicyResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getPolicyValidateBeforeCall(code, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPolicyRequest {
        private final String code;
        private String scope;

        private APIgetPolicyRequest(String code) {
            this.code = code;
        }

        /**
         * Set scope
         * @param scope Optional. Will use the default scope if not provided. The scope of the Policy (optional)
         * @return APIgetPolicyRequest
         */
        public APIgetPolicyRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for getPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a specific Policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPolicyCall(code, scope, _callback);
        }

        /**
         * Execute getPolicy request
         * @return PolicyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a specific Policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyResponse execute() throws ApiException {
            ApiResponse<PolicyResponse> localVarResp = getPolicyWithHttpInfo(code, scope);
            return localVarResp.getData();
        }

        /**
         * Execute getPolicy request. Use any specified configuration options to override any other configuration for this request only.
         * @return PolicyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a specific Policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PolicyResponse> localVarResp = getPolicyWithHttpInfo(code, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getPolicy request with HTTP info returned
         * @return ApiResponse&lt;PolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a specific Policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyResponse> executeWithHttpInfo() throws ApiException {
            return getPolicyWithHttpInfo(code, scope);
        }

        /**
         * Execute getPolicy request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a specific Policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getPolicyWithHttpInfo(code, scope, opts);
        }

        /**
         * Execute getPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a specific Policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyResponse> _callback) throws ApiException {
            return getPolicyAsync(code, scope, _callback);
        }

        /**
         * Execute getPolicy request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a specific Policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return getPolicyAsync(code, scope, _callback, opts);
        }
    }

    /**
     * GetPolicy: Get Policy
     * Gets an identified Policy
     * @param code The code of the Policy (required)
     * @return APIgetPolicyRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific Policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPolicyRequest getPolicy(String code) {
        return new APIgetPolicyRequest(code);
    }
    private okhttp3.Call getPolicyCollectionCall(String code, String scope, final ApiCallback _callback) throws ApiException {
        return getPolicyCollectionCall(code, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getPolicyCollectionCall(String code, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policycollections/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyCollectionValidateBeforeCall(String code, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getPolicyCollection(Async)");
        }

        return getPolicyCollectionCall(code, scope, _callback, opts);

    }


    private ApiResponse<PolicyCollectionResponse> getPolicyCollectionWithHttpInfo(String code, String scope) throws ApiException {
        okhttp3.Call localVarCall = getPolicyCollectionValidateBeforeCall(code, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PolicyCollectionResponse> getPolicyCollectionWithHttpInfo(String code, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getPolicyCollectionValidateBeforeCall(code, scope, null, opts);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPolicyCollectionAsync(String code, String scope, final ApiCallback<PolicyCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPolicyCollectionValidateBeforeCall(code, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getPolicyCollectionAsync(String code, String scope, final ApiCallback<PolicyCollectionResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getPolicyCollectionValidateBeforeCall(code, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPolicyCollectionRequest {
        private final String code;
        private String scope;

        private APIgetPolicyCollectionRequest(String code) {
            this.code = code;
        }

        /**
         * Set scope
         * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
         * @return APIgetPolicyCollectionRequest
         */
        public APIgetPolicyCollectionRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for getPolicyCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPolicyCollectionCall(code, scope, _callback);
        }

        /**
         * Execute getPolicyCollection request
         * @return PolicyCollectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyCollectionResponse execute() throws ApiException {
            ApiResponse<PolicyCollectionResponse> localVarResp = getPolicyCollectionWithHttpInfo(code, scope);
            return localVarResp.getData();
        }

        /**
         * Execute getPolicyCollection request. Use any specified configuration options to override any other configuration for this request only.
         * @return PolicyCollectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyCollectionResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PolicyCollectionResponse> localVarResp = getPolicyCollectionWithHttpInfo(code, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getPolicyCollection request with HTTP info returned
         * @return ApiResponse&lt;PolicyCollectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyCollectionResponse> executeWithHttpInfo() throws ApiException {
            return getPolicyCollectionWithHttpInfo(code, scope);
        }

        /**
         * Execute getPolicyCollection request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PolicyCollectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyCollectionResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getPolicyCollectionWithHttpInfo(code, scope, opts);
        }

        /**
         * Execute getPolicyCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyCollectionResponse> _callback) throws ApiException {
            return getPolicyCollectionAsync(code, scope, _callback);
        }

        /**
         * Execute getPolicyCollection request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyCollectionResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return getPolicyCollectionAsync(code, scope, _callback, opts);
        }
    }

    /**
     * GetPolicyCollection: Get PolicyCollection
     * Gets an identified PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @return APIgetPolicyCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPolicyCollectionRequest getPolicyCollection(String code) {
        return new APIgetPolicyCollectionRequest(code);
    }
    private okhttp3.Call listPoliciesCall(String scope, final ApiCallback _callback) throws ApiException {
        return listPoliciesCall(scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listPoliciesCall(String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPoliciesValidateBeforeCall(String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listPoliciesCall(scope, _callback, opts);

    }


    private ApiResponse<List<PolicyResponse>> listPoliciesWithHttpInfo(String scope) throws ApiException {
        okhttp3.Call localVarCall = listPoliciesValidateBeforeCall(scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<List<PolicyResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<List<PolicyResponse>> listPoliciesWithHttpInfo(String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listPoliciesValidateBeforeCall(scope, null, opts);
        Type localVarReturnType = new TypeToken<List<PolicyResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPoliciesAsync(String scope, final ApiCallback<List<PolicyResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPoliciesValidateBeforeCall(scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<List<PolicyResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listPoliciesAsync(String scope, final ApiCallback<List<PolicyResponse>> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listPoliciesValidateBeforeCall(scope, _callback, opts);
        Type localVarReturnType = new TypeToken<List<PolicyResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistPoliciesRequest {
        private String scope;

        private APIlistPoliciesRequest() {
        }

        /**
         * Set scope
         * @param scope Optional. Will use the default scope if not provided. The requested scope (optional)
         * @return APIlistPoliciesRequest
         */
        public APIlistPoliciesRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for listPolicies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Policies </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPoliciesCall(scope, _callback);
        }

        /**
         * Execute listPolicies request
         * @return List&lt;PolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Policies </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<PolicyResponse> execute() throws ApiException {
            ApiResponse<List<PolicyResponse>> localVarResp = listPoliciesWithHttpInfo(scope);
            return localVarResp.getData();
        }

        /**
         * Execute listPolicies request. Use any specified configuration options to override any other configuration for this request only.
         * @return List&lt;PolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Policies </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<PolicyResponse> execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<List<PolicyResponse>> localVarResp = listPoliciesWithHttpInfo(scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listPolicies request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PolicyResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Policies </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PolicyResponse>> executeWithHttpInfo() throws ApiException {
            return listPoliciesWithHttpInfo(scope);
        }

        /**
         * Execute listPolicies request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;List&lt;PolicyResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Policies </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PolicyResponse>> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listPoliciesWithHttpInfo(scope, opts);
        }

        /**
         * Execute listPolicies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Policies </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PolicyResponse>> _callback) throws ApiException {
            return listPoliciesAsync(scope, _callback);
        }

        /**
         * Execute listPolicies request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Policies </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PolicyResponse>> _callback, ConfigurationOptions opts) throws ApiException {
            return listPoliciesAsync(scope, _callback, opts);
        }
    }

    /**
     * ListPolicies: List Policies
     * Gets all Policies in a scope. For pagination support, use PagePolicies.
     * @return APIlistPoliciesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Policies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistPoliciesRequest listPolicies() {
        return new APIlistPoliciesRequest();
    }
    private okhttp3.Call listPolicyCollectionsCall(String scope, final ApiCallback _callback) throws ApiException {
        return listPolicyCollectionsCall(scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listPolicyCollectionsCall(String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policycollections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPolicyCollectionsValidateBeforeCall(String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listPolicyCollectionsCall(scope, _callback, opts);

    }


    private ApiResponse<List<PolicyCollectionResponse>> listPolicyCollectionsWithHttpInfo(String scope) throws ApiException {
        okhttp3.Call localVarCall = listPolicyCollectionsValidateBeforeCall(scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<List<PolicyCollectionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<List<PolicyCollectionResponse>> listPolicyCollectionsWithHttpInfo(String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listPolicyCollectionsValidateBeforeCall(scope, null, opts);
        Type localVarReturnType = new TypeToken<List<PolicyCollectionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPolicyCollectionsAsync(String scope, final ApiCallback<List<PolicyCollectionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPolicyCollectionsValidateBeforeCall(scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<List<PolicyCollectionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listPolicyCollectionsAsync(String scope, final ApiCallback<List<PolicyCollectionResponse>> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listPolicyCollectionsValidateBeforeCall(scope, _callback, opts);
        Type localVarReturnType = new TypeToken<List<PolicyCollectionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistPolicyCollectionsRequest {
        private String scope;

        private APIlistPolicyCollectionsRequest() {
        }

        /**
         * Set scope
         * @param scope Optional. Will use the default scope if not provided. The requested scope (optional)
         * @return APIlistPolicyCollectionsRequest
         */
        public APIlistPolicyCollectionsRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for listPolicyCollections
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPolicyCollectionsCall(scope, _callback);
        }

        /**
         * Execute listPolicyCollections request
         * @return List&lt;PolicyCollectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<PolicyCollectionResponse> execute() throws ApiException {
            ApiResponse<List<PolicyCollectionResponse>> localVarResp = listPolicyCollectionsWithHttpInfo(scope);
            return localVarResp.getData();
        }

        /**
         * Execute listPolicyCollections request. Use any specified configuration options to override any other configuration for this request only.
         * @return List&lt;PolicyCollectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<PolicyCollectionResponse> execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<List<PolicyCollectionResponse>> localVarResp = listPolicyCollectionsWithHttpInfo(scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listPolicyCollections request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PolicyCollectionResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PolicyCollectionResponse>> executeWithHttpInfo() throws ApiException {
            return listPolicyCollectionsWithHttpInfo(scope);
        }

        /**
         * Execute listPolicyCollections request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;List&lt;PolicyCollectionResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PolicyCollectionResponse>> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listPolicyCollectionsWithHttpInfo(scope, opts);
        }

        /**
         * Execute listPolicyCollections request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PolicyCollectionResponse>> _callback) throws ApiException {
            return listPolicyCollectionsAsync(scope, _callback);
        }

        /**
         * Execute listPolicyCollections request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PolicyCollectionResponse>> _callback, ConfigurationOptions opts) throws ApiException {
            return listPolicyCollectionsAsync(scope, _callback, opts);
        }
    }

    /**
     * ListPolicyCollections: List PolicyCollections
     * Gets all PolicyCollections in a scope. For pagination support, use PagePolicyCollections
     * @return APIlistPolicyCollectionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistPolicyCollectionsRequest listPolicyCollections() {
        return new APIlistPolicyCollectionsRequest();
    }
    private okhttp3.Call pagePoliciesCall(String sortBy, Integer limit, String filter, String page, final ApiCallback _callback) throws ApiException {
        return pagePoliciesCall(sortBy, limit, filter, page,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call pagePoliciesCall(String sortBy, Integer limit, String filter, String page, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policies/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagePoliciesValidateBeforeCall(String sortBy, Integer limit, String filter, String page, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return pagePoliciesCall(sortBy, limit, filter, page, _callback, opts);

    }


    private ApiResponse<ResourceListOfPolicyResponse> pagePoliciesWithHttpInfo(String sortBy, Integer limit, String filter, String page) throws ApiException {
        okhttp3.Call localVarCall = pagePoliciesValidateBeforeCall(sortBy, limit, filter, page, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfPolicyResponse> pagePoliciesWithHttpInfo(String sortBy, Integer limit, String filter, String page, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = pagePoliciesValidateBeforeCall(sortBy, limit, filter, page, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pagePoliciesAsync(String sortBy, Integer limit, String filter, String page, final ApiCallback<ResourceListOfPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pagePoliciesValidateBeforeCall(sortBy, limit, filter, page, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call pagePoliciesAsync(String sortBy, Integer limit, String filter, String page, final ApiCallback<ResourceListOfPolicyResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = pagePoliciesValidateBeforeCall(sortBy, limit, filter, page, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIpagePoliciesRequest {
        private String sortBy;
        private Integer limit;
        private String filter;
        private String page;

        private APIpagePoliciesRequest() {
        }

        /**
         * Set sortBy
         * @param sortBy Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
         * @return APIpagePoliciesRequest
         */
        public APIpagePoliciesRequest sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set limit
         * @param limit Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)
         * @return APIpagePoliciesRequest
         */
        public APIpagePoliciesRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Optional. Expression to filter the result set (optional)
         * @return APIpagePoliciesRequest
         */
        public APIpagePoliciesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set page
         * @param page Optional. Paging token returned from a previous result (optional)
         * @return APIpagePoliciesRequest
         */
        public APIpagePoliciesRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Build call for pagePolicies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of Policies </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pagePoliciesCall(sortBy, limit, filter, page, _callback);
        }

        /**
         * Execute pagePolicies request
         * @return ResourceListOfPolicyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of Policies </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfPolicyResponse execute() throws ApiException {
            ApiResponse<ResourceListOfPolicyResponse> localVarResp = pagePoliciesWithHttpInfo(sortBy, limit, filter, page);
            return localVarResp.getData();
        }

        /**
         * Execute pagePolicies request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfPolicyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of Policies </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfPolicyResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfPolicyResponse> localVarResp = pagePoliciesWithHttpInfo(sortBy, limit, filter, page, opts);
            return localVarResp.getData();
        }

        /**
         * Execute pagePolicies request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfPolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of Policies </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfPolicyResponse> executeWithHttpInfo() throws ApiException {
            return pagePoliciesWithHttpInfo(sortBy, limit, filter, page);
        }

        /**
         * Execute pagePolicies request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfPolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of Policies </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfPolicyResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return pagePoliciesWithHttpInfo(sortBy, limit, filter, page, opts);
        }

        /**
         * Execute pagePolicies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of Policies </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfPolicyResponse> _callback) throws ApiException {
            return pagePoliciesAsync(sortBy, limit, filter, page, _callback);
        }

        /**
         * Execute pagePolicies request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of Policies </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfPolicyResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return pagePoliciesAsync(sortBy, limit, filter, page, _callback, opts);
        }
    }

    /**
     * PagePolicies: Page Policies
     * Gets all Policies with pagination support.
     * @return APIpagePoliciesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested list of Policies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIpagePoliciesRequest pagePolicies() {
        return new APIpagePoliciesRequest();
    }
    private okhttp3.Call pagePolicyCollectionsCall(String sortBy, Integer limit, String filter, String page, final ApiCallback _callback) throws ApiException {
        return pagePolicyCollectionsCall(sortBy, limit, filter, page,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call pagePolicyCollectionsCall(String sortBy, Integer limit, String filter, String page, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policycollections/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagePolicyCollectionsValidateBeforeCall(String sortBy, Integer limit, String filter, String page, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return pagePolicyCollectionsCall(sortBy, limit, filter, page, _callback, opts);

    }


    private ApiResponse<ResourceListOfPolicyCollectionResponse> pagePolicyCollectionsWithHttpInfo(String sortBy, Integer limit, String filter, String page) throws ApiException {
        okhttp3.Call localVarCall = pagePolicyCollectionsValidateBeforeCall(sortBy, limit, filter, page, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfPolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfPolicyCollectionResponse> pagePolicyCollectionsWithHttpInfo(String sortBy, Integer limit, String filter, String page, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = pagePolicyCollectionsValidateBeforeCall(sortBy, limit, filter, page, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfPolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pagePolicyCollectionsAsync(String sortBy, Integer limit, String filter, String page, final ApiCallback<ResourceListOfPolicyCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pagePolicyCollectionsValidateBeforeCall(sortBy, limit, filter, page, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfPolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call pagePolicyCollectionsAsync(String sortBy, Integer limit, String filter, String page, final ApiCallback<ResourceListOfPolicyCollectionResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = pagePolicyCollectionsValidateBeforeCall(sortBy, limit, filter, page, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfPolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIpagePolicyCollectionsRequest {
        private String sortBy;
        private Integer limit;
        private String filter;
        private String page;

        private APIpagePolicyCollectionsRequest() {
        }

        /**
         * Set sortBy
         * @param sortBy Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
         * @return APIpagePolicyCollectionsRequest
         */
        public APIpagePolicyCollectionsRequest sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set limit
         * @param limit Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)
         * @return APIpagePolicyCollectionsRequest
         */
        public APIpagePolicyCollectionsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Optional. Expression to filter the result set (optional)
         * @return APIpagePolicyCollectionsRequest
         */
        public APIpagePolicyCollectionsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set page
         * @param page Optional. Paging token returned from a previous result (optional)
         * @return APIpagePolicyCollectionsRequest
         */
        public APIpagePolicyCollectionsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Build call for pagePolicyCollections
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pagePolicyCollectionsCall(sortBy, limit, filter, page, _callback);
        }

        /**
         * Execute pagePolicyCollections request
         * @return ResourceListOfPolicyCollectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfPolicyCollectionResponse execute() throws ApiException {
            ApiResponse<ResourceListOfPolicyCollectionResponse> localVarResp = pagePolicyCollectionsWithHttpInfo(sortBy, limit, filter, page);
            return localVarResp.getData();
        }

        /**
         * Execute pagePolicyCollections request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfPolicyCollectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfPolicyCollectionResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfPolicyCollectionResponse> localVarResp = pagePolicyCollectionsWithHttpInfo(sortBy, limit, filter, page, opts);
            return localVarResp.getData();
        }

        /**
         * Execute pagePolicyCollections request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfPolicyCollectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfPolicyCollectionResponse> executeWithHttpInfo() throws ApiException {
            return pagePolicyCollectionsWithHttpInfo(sortBy, limit, filter, page);
        }

        /**
         * Execute pagePolicyCollections request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfPolicyCollectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfPolicyCollectionResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return pagePolicyCollectionsWithHttpInfo(sortBy, limit, filter, page, opts);
        }

        /**
         * Execute pagePolicyCollections request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfPolicyCollectionResponse> _callback) throws ApiException {
            return pagePolicyCollectionsAsync(sortBy, limit, filter, page, _callback);
        }

        /**
         * Execute pagePolicyCollections request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfPolicyCollectionResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return pagePolicyCollectionsAsync(sortBy, limit, filter, page, _callback, opts);
        }
    }

    /**
     * PagePolicyCollections: Page PolicyCollections
     * Gets all PolicyCollections with pagination support.
     * @return APIpagePolicyCollectionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIpagePolicyCollectionsRequest pagePolicyCollections() {
        return new APIpagePolicyCollectionsRequest();
    }
    private okhttp3.Call removeFromPolicyCollectionCall(String code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, String scope, final ApiCallback _callback) throws ApiException {
        return removeFromPolicyCollectionCall(code, removeFromPolicyCollectionRequest, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call removeFromPolicyCollectionCall(String code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeFromPolicyCollectionRequest;

        // create path and map variables
        String localVarPath = "/api/policycollections/{code}/remove"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromPolicyCollectionValidateBeforeCall(String code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling removeFromPolicyCollection(Async)");
        }

        // verify the required parameter 'removeFromPolicyCollectionRequest' is set
        if (removeFromPolicyCollectionRequest == null) {
            throw new ApiException("Missing the required parameter 'removeFromPolicyCollectionRequest' when calling removeFromPolicyCollection(Async)");
        }

        return removeFromPolicyCollectionCall(code, removeFromPolicyCollectionRequest, scope, _callback, opts);

    }


    private ApiResponse<PolicyCollectionResponse> removeFromPolicyCollectionWithHttpInfo(String code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, String scope) throws ApiException {
        okhttp3.Call localVarCall = removeFromPolicyCollectionValidateBeforeCall(code, removeFromPolicyCollectionRequest, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PolicyCollectionResponse> removeFromPolicyCollectionWithHttpInfo(String code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = removeFromPolicyCollectionValidateBeforeCall(code, removeFromPolicyCollectionRequest, scope, null, opts);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeFromPolicyCollectionAsync(String code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, String scope, final ApiCallback<PolicyCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromPolicyCollectionValidateBeforeCall(code, removeFromPolicyCollectionRequest, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call removeFromPolicyCollectionAsync(String code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, String scope, final ApiCallback<PolicyCollectionResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = removeFromPolicyCollectionValidateBeforeCall(code, removeFromPolicyCollectionRequest, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIremoveFromPolicyCollectionRequest {
        private final String code;
        private final RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest;
        private String scope;

        private APIremoveFromPolicyCollectionRequest(String code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest) {
            this.code = code;
            this.removeFromPolicyCollectionRequest = removeFromPolicyCollectionRequest;
        }

        /**
         * Set scope
         * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
         * @return APIremoveFromPolicyCollectionRequest
         */
        public APIremoveFromPolicyCollectionRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for removeFromPolicyCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFromPolicyCollectionCall(code, removeFromPolicyCollectionRequest, scope, _callback);
        }

        /**
         * Execute removeFromPolicyCollection request
         * @return PolicyCollectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyCollectionResponse execute() throws ApiException {
            ApiResponse<PolicyCollectionResponse> localVarResp = removeFromPolicyCollectionWithHttpInfo(code, removeFromPolicyCollectionRequest, scope);
            return localVarResp.getData();
        }

        /**
         * Execute removeFromPolicyCollection request. Use any specified configuration options to override any other configuration for this request only.
         * @return PolicyCollectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyCollectionResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PolicyCollectionResponse> localVarResp = removeFromPolicyCollectionWithHttpInfo(code, removeFromPolicyCollectionRequest, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute removeFromPolicyCollection request with HTTP info returned
         * @return ApiResponse&lt;PolicyCollectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyCollectionResponse> executeWithHttpInfo() throws ApiException {
            return removeFromPolicyCollectionWithHttpInfo(code, removeFromPolicyCollectionRequest, scope);
        }

        /**
         * Execute removeFromPolicyCollection request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PolicyCollectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyCollectionResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return removeFromPolicyCollectionWithHttpInfo(code, removeFromPolicyCollectionRequest, scope, opts);
        }

        /**
         * Execute removeFromPolicyCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyCollectionResponse> _callback) throws ApiException {
            return removeFromPolicyCollectionAsync(code, removeFromPolicyCollectionRequest, scope, _callback);
        }

        /**
         * Execute removeFromPolicyCollection request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyCollectionResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return removeFromPolicyCollectionAsync(code, removeFromPolicyCollectionRequest, scope, _callback, opts);
        }
    }

    /**
     * RemoveFromPolicyCollection: Remove From PolicyCollection
     * Remove Policies and/or PolicyCollections from a PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param removeFromPolicyCollectionRequest Ids of the PolicyCollections and/or Policies to remove from the PolicyCollection (required)
     * @return APIremoveFromPolicyCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIremoveFromPolicyCollectionRequest removeFromPolicyCollection(String code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest) {
        return new APIremoveFromPolicyCollectionRequest(code, removeFromPolicyCollectionRequest);
    }
    private okhttp3.Call updatePolicyCall(String code, PolicyUpdateRequest policyUpdateRequest, String scope, final ApiCallback _callback) throws ApiException {
        return updatePolicyCall(code, policyUpdateRequest, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updatePolicyCall(String code, PolicyUpdateRequest policyUpdateRequest, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policyUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/policies/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePolicyValidateBeforeCall(String code, PolicyUpdateRequest policyUpdateRequest, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updatePolicy(Async)");
        }

        // verify the required parameter 'policyUpdateRequest' is set
        if (policyUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'policyUpdateRequest' when calling updatePolicy(Async)");
        }

        return updatePolicyCall(code, policyUpdateRequest, scope, _callback, opts);

    }


    private ApiResponse<PolicyResponse> updatePolicyWithHttpInfo(String code, PolicyUpdateRequest policyUpdateRequest, String scope) throws ApiException {
        okhttp3.Call localVarCall = updatePolicyValidateBeforeCall(code, policyUpdateRequest, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PolicyResponse> updatePolicyWithHttpInfo(String code, PolicyUpdateRequest policyUpdateRequest, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updatePolicyValidateBeforeCall(code, policyUpdateRequest, scope, null, opts);
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePolicyAsync(String code, PolicyUpdateRequest policyUpdateRequest, String scope, final ApiCallback<PolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePolicyValidateBeforeCall(code, policyUpdateRequest, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updatePolicyAsync(String code, PolicyUpdateRequest policyUpdateRequest, String scope, final ApiCallback<PolicyResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updatePolicyValidateBeforeCall(code, policyUpdateRequest, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdatePolicyRequest {
        private final String code;
        private final PolicyUpdateRequest policyUpdateRequest;
        private String scope;

        private APIupdatePolicyRequest(String code, PolicyUpdateRequest policyUpdateRequest) {
            this.code = code;
            this.policyUpdateRequest = policyUpdateRequest;
        }

        /**
         * Set scope
         * @param scope Optional. Will use the default scope if not provided. The scope of the Policy (optional)
         * @return APIupdatePolicyRequest
         */
        public APIupdatePolicyRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for updatePolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updatePolicyCall(code, policyUpdateRequest, scope, _callback);
        }

        /**
         * Execute updatePolicy request
         * @return PolicyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyResponse execute() throws ApiException {
            ApiResponse<PolicyResponse> localVarResp = updatePolicyWithHttpInfo(code, policyUpdateRequest, scope);
            return localVarResp.getData();
        }

        /**
         * Execute updatePolicy request. Use any specified configuration options to override any other configuration for this request only.
         * @return PolicyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PolicyResponse> localVarResp = updatePolicyWithHttpInfo(code, policyUpdateRequest, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updatePolicy request with HTTP info returned
         * @return ApiResponse&lt;PolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyResponse> executeWithHttpInfo() throws ApiException {
            return updatePolicyWithHttpInfo(code, policyUpdateRequest, scope);
        }

        /**
         * Execute updatePolicy request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updatePolicyWithHttpInfo(code, policyUpdateRequest, scope, opts);
        }

        /**
         * Execute updatePolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyResponse> _callback) throws ApiException {
            return updatePolicyAsync(code, policyUpdateRequest, scope, _callback);
        }

        /**
         * Execute updatePolicy request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated policy </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return updatePolicyAsync(code, policyUpdateRequest, scope, _callback, opts);
        }
    }

    /**
     * UpdatePolicy: Update Policy
     * Updates a Policy
     * @param code The code of the Policy (required)
     * @param policyUpdateRequest The updated definition of the Policy (required)
     * @return APIupdatePolicyRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdatePolicyRequest updatePolicy(String code, PolicyUpdateRequest policyUpdateRequest) {
        return new APIupdatePolicyRequest(code, policyUpdateRequest);
    }
    private okhttp3.Call updatePolicyCollectionCall(String code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, String scope, final ApiCallback _callback) throws ApiException {
        return updatePolicyCollectionCall(code, policyCollectionUpdateRequest, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updatePolicyCollectionCall(String code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policyCollectionUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/policycollections/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePolicyCollectionValidateBeforeCall(String code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updatePolicyCollection(Async)");
        }

        // verify the required parameter 'policyCollectionUpdateRequest' is set
        if (policyCollectionUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'policyCollectionUpdateRequest' when calling updatePolicyCollection(Async)");
        }

        return updatePolicyCollectionCall(code, policyCollectionUpdateRequest, scope, _callback, opts);

    }


    private ApiResponse<PolicyCollectionResponse> updatePolicyCollectionWithHttpInfo(String code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, String scope) throws ApiException {
        okhttp3.Call localVarCall = updatePolicyCollectionValidateBeforeCall(code, policyCollectionUpdateRequest, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PolicyCollectionResponse> updatePolicyCollectionWithHttpInfo(String code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updatePolicyCollectionValidateBeforeCall(code, policyCollectionUpdateRequest, scope, null, opts);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePolicyCollectionAsync(String code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, String scope, final ApiCallback<PolicyCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePolicyCollectionValidateBeforeCall(code, policyCollectionUpdateRequest, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updatePolicyCollectionAsync(String code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, String scope, final ApiCallback<PolicyCollectionResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updatePolicyCollectionValidateBeforeCall(code, policyCollectionUpdateRequest, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdatePolicyCollectionRequest {
        private final String code;
        private final PolicyCollectionUpdateRequest policyCollectionUpdateRequest;
        private String scope;

        private APIupdatePolicyCollectionRequest(String code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest) {
            this.code = code;
            this.policyCollectionUpdateRequest = policyCollectionUpdateRequest;
        }

        /**
         * Set scope
         * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
         * @return APIupdatePolicyCollectionRequest
         */
        public APIupdatePolicyCollectionRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for updatePolicyCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updatePolicyCollectionCall(code, policyCollectionUpdateRequest, scope, _callback);
        }

        /**
         * Execute updatePolicyCollection request
         * @return PolicyCollectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyCollectionResponse execute() throws ApiException {
            ApiResponse<PolicyCollectionResponse> localVarResp = updatePolicyCollectionWithHttpInfo(code, policyCollectionUpdateRequest, scope);
            return localVarResp.getData();
        }

        /**
         * Execute updatePolicyCollection request. Use any specified configuration options to override any other configuration for this request only.
         * @return PolicyCollectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyCollectionResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PolicyCollectionResponse> localVarResp = updatePolicyCollectionWithHttpInfo(code, policyCollectionUpdateRequest, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updatePolicyCollection request with HTTP info returned
         * @return ApiResponse&lt;PolicyCollectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyCollectionResponse> executeWithHttpInfo() throws ApiException {
            return updatePolicyCollectionWithHttpInfo(code, policyCollectionUpdateRequest, scope);
        }

        /**
         * Execute updatePolicyCollection request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PolicyCollectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyCollectionResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updatePolicyCollectionWithHttpInfo(code, policyCollectionUpdateRequest, scope, opts);
        }

        /**
         * Execute updatePolicyCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyCollectionResponse> _callback) throws ApiException {
            return updatePolicyCollectionAsync(code, policyCollectionUpdateRequest, scope, _callback);
        }

        /**
         * Execute updatePolicyCollection request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyCollectionResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return updatePolicyCollectionAsync(code, policyCollectionUpdateRequest, scope, _callback, opts);
        }
    }

    /**
     * UpdatePolicyCollection: Update PolicyCollection
     * Updates a PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param policyCollectionUpdateRequest The updated definition of the PolicyCollection (required)
     * @return APIupdatePolicyCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdatePolicyCollectionRequest updatePolicyCollection(String code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest) {
        return new APIupdatePolicyCollectionRequest(code, policyCollectionUpdateRequest);
    }
}
