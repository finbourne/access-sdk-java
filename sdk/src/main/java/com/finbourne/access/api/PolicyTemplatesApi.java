/*
 * FINBOURNE Access Management API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.access.api;

import com.finbourne.access.ApiCallback;
import com.finbourne.access.ApiClient;
import com.finbourne.access.ApiException;
import com.finbourne.access.ApiResponse;
import com.finbourne.access.Configuration;
import com.finbourne.access.Pair;
import com.finbourne.access.ProgressRequestBody;
import com.finbourne.access.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.access.model.GeneratePolicyFromTemplateRequest;
import com.finbourne.access.model.GeneratedPolicyComponents;
import com.finbourne.access.model.LusidProblemDetails;
import com.finbourne.access.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.access.model.PolicyTemplateCreationRequest;
import com.finbourne.access.model.PolicyTemplateResponse;
import com.finbourne.access.model.PolicyTemplateUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PolicyTemplatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PolicyTemplatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PolicyTemplatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createPolicyTemplateCall(PolicyTemplateCreationRequest policyTemplateCreationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policyTemplateCreationRequest;

        // create path and map variables
        String localVarPath = "/api/policytemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPolicyTemplateValidateBeforeCall(PolicyTemplateCreationRequest policyTemplateCreationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyTemplateCreationRequest' is set
        if (policyTemplateCreationRequest == null) {
            throw new ApiException("Missing the required parameter 'policyTemplateCreationRequest' when calling createPolicyTemplate(Async)");
        }

        return createPolicyTemplateCall(policyTemplateCreationRequest, _callback);

    }


    private ApiResponse<PolicyTemplateResponse> createPolicyTemplateWithHttpInfo(PolicyTemplateCreationRequest policyTemplateCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createPolicyTemplateValidateBeforeCall(policyTemplateCreationRequest, null);
        Type localVarReturnType = new TypeToken<PolicyTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPolicyTemplateAsync(PolicyTemplateCreationRequest policyTemplateCreationRequest, final ApiCallback<PolicyTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPolicyTemplateValidateBeforeCall(policyTemplateCreationRequest, _callback);
        Type localVarReturnType = new TypeToken<PolicyTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreatePolicyTemplateRequest {
        private final PolicyTemplateCreationRequest policyTemplateCreationRequest;

        private APIcreatePolicyTemplateRequest(PolicyTemplateCreationRequest policyTemplateCreationRequest) {
            this.policyTemplateCreationRequest = policyTemplateCreationRequest;
        }

        /**
         * Build call for createPolicyTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Policy Template </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createPolicyTemplateCall(policyTemplateCreationRequest, _callback);
        }

        /**
         * Execute createPolicyTemplate request
         * @return PolicyTemplateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Policy Template </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyTemplateResponse execute() throws ApiException {
            ApiResponse<PolicyTemplateResponse> localVarResp = createPolicyTemplateWithHttpInfo(policyTemplateCreationRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createPolicyTemplate request with HTTP info returned
         * @return ApiResponse&lt;PolicyTemplateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Policy Template </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyTemplateResponse> executeWithHttpInfo() throws ApiException {
            return createPolicyTemplateWithHttpInfo(policyTemplateCreationRequest);
        }

        /**
         * Execute createPolicyTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Policy Template </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyTemplateResponse> _callback) throws ApiException {
            return createPolicyTemplateAsync(policyTemplateCreationRequest, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] CreatePolicyTemplate: Create a Policy Template
     * Creates a Policy Template
     * @param policyTemplateCreationRequest The definition of the policy template (required)
     * @return APIcreatePolicyTemplateRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Policy Template </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreatePolicyTemplateRequest createPolicyTemplate(PolicyTemplateCreationRequest policyTemplateCreationRequest) {
        return new APIcreatePolicyTemplateRequest(policyTemplateCreationRequest);
    }
    private okhttp3.Call deletePolicyTemplateCall(String code, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policytemplates/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePolicyTemplateValidateBeforeCall(String code, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deletePolicyTemplate(Async)");
        }

        return deletePolicyTemplateCall(code, scope, _callback);

    }


    private ApiResponse<Void> deletePolicyTemplateWithHttpInfo(String code, String scope) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyTemplateValidateBeforeCall(code, scope, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePolicyTemplateAsync(String code, String scope, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePolicyTemplateValidateBeforeCall(code, scope, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeletePolicyTemplateRequest {
        private final String code;
        private String scope;

        private APIdeletePolicyTemplateRequest(String code) {
            this.code = code;
        }

        /**
         * Set scope
         * @param scope Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)
         * @return APIdeletePolicyTemplateRequest
         */
        public APIdeletePolicyTemplateRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for deletePolicyTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePolicyTemplateCall(code, scope, _callback);
        }

        /**
         * Execute deletePolicyTemplate request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePolicyTemplateWithHttpInfo(code, scope);
        }

        /**
         * Execute deletePolicyTemplate request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePolicyTemplateWithHttpInfo(code, scope);
        }

        /**
         * Execute deletePolicyTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePolicyTemplateAsync(code, scope, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] DeletePolicyTemplate: Deleting a policy template
     * Deletes an identified Policy Template
     * @param code The code of the Policy Template (required)
     * @return APIdeletePolicyTemplateRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeletePolicyTemplateRequest deletePolicyTemplate(String code) {
        return new APIdeletePolicyTemplateRequest(code);
    }
    private okhttp3.Call generatePolicyFromTemplateCall(GeneratePolicyFromTemplateRequest generatePolicyFromTemplateRequest, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generatePolicyFromTemplateRequest;

        // create path and map variables
        String localVarPath = "/api/policytemplates/$generatepolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generatePolicyFromTemplateValidateBeforeCall(GeneratePolicyFromTemplateRequest generatePolicyFromTemplateRequest, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generatePolicyFromTemplateRequest' is set
        if (generatePolicyFromTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'generatePolicyFromTemplateRequest' when calling generatePolicyFromTemplate(Async)");
        }

        return generatePolicyFromTemplateCall(generatePolicyFromTemplateRequest, asAt, _callback);

    }


    private ApiResponse<GeneratedPolicyComponents> generatePolicyFromTemplateWithHttpInfo(GeneratePolicyFromTemplateRequest generatePolicyFromTemplateRequest, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = generatePolicyFromTemplateValidateBeforeCall(generatePolicyFromTemplateRequest, asAt, null);
        Type localVarReturnType = new TypeToken<GeneratedPolicyComponents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generatePolicyFromTemplateAsync(GeneratePolicyFromTemplateRequest generatePolicyFromTemplateRequest, OffsetDateTime asAt, final ApiCallback<GeneratedPolicyComponents> _callback) throws ApiException {

        okhttp3.Call localVarCall = generatePolicyFromTemplateValidateBeforeCall(generatePolicyFromTemplateRequest, asAt, _callback);
        Type localVarReturnType = new TypeToken<GeneratedPolicyComponents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgeneratePolicyFromTemplateRequest {
        private final GeneratePolicyFromTemplateRequest generatePolicyFromTemplateRequest;
        private OffsetDateTime asAt;

        private APIgeneratePolicyFromTemplateRequest(GeneratePolicyFromTemplateRequest generatePolicyFromTemplateRequest) {
            this.generatePolicyFromTemplateRequest = generatePolicyFromTemplateRequest;
        }

        /**
         * Set asAt
         * @param asAt Optional. The AsAt date time of the data (optional)
         * @return APIgeneratePolicyFromTemplateRequest
         */
        public APIgeneratePolicyFromTemplateRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for generatePolicyFromTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generatePolicyFromTemplateCall(generatePolicyFromTemplateRequest, asAt, _callback);
        }

        /**
         * Execute generatePolicyFromTemplate request
         * @return GeneratedPolicyComponents
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GeneratedPolicyComponents execute() throws ApiException {
            ApiResponse<GeneratedPolicyComponents> localVarResp = generatePolicyFromTemplateWithHttpInfo(generatePolicyFromTemplateRequest, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute generatePolicyFromTemplate request with HTTP info returned
         * @return ApiResponse&lt;GeneratedPolicyComponents&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GeneratedPolicyComponents> executeWithHttpInfo() throws ApiException {
            return generatePolicyFromTemplateWithHttpInfo(generatePolicyFromTemplateRequest, asAt);
        }

        /**
         * Execute generatePolicyFromTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GeneratedPolicyComponents> _callback) throws ApiException {
            return generatePolicyFromTemplateAsync(generatePolicyFromTemplateRequest, asAt, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] GeneratePolicyFromTemplate: Generate policy from template
     * Generates policies from templates
     * @param generatePolicyFromTemplateRequest Definition of the generate request (required)
     * @return APIgeneratePolicyFromTemplateRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgeneratePolicyFromTemplateRequest generatePolicyFromTemplate(GeneratePolicyFromTemplateRequest generatePolicyFromTemplateRequest) {
        return new APIgeneratePolicyFromTemplateRequest(generatePolicyFromTemplateRequest);
    }
    private okhttp3.Call getPolicyTemplateCall(String code, OffsetDateTime asAt, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policytemplates/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyTemplateValidateBeforeCall(String code, OffsetDateTime asAt, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getPolicyTemplate(Async)");
        }

        return getPolicyTemplateCall(code, asAt, scope, _callback);

    }


    private ApiResponse<PolicyTemplateResponse> getPolicyTemplateWithHttpInfo(String code, OffsetDateTime asAt, String scope) throws ApiException {
        okhttp3.Call localVarCall = getPolicyTemplateValidateBeforeCall(code, asAt, scope, null);
        Type localVarReturnType = new TypeToken<PolicyTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPolicyTemplateAsync(String code, OffsetDateTime asAt, String scope, final ApiCallback<PolicyTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPolicyTemplateValidateBeforeCall(code, asAt, scope, _callback);
        Type localVarReturnType = new TypeToken<PolicyTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPolicyTemplateRequest {
        private final String code;
        private OffsetDateTime asAt;
        private String scope;

        private APIgetPolicyTemplateRequest(String code) {
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt Optional. The AsAt date time of the data. If not specified defaults to current time (optional)
         * @return APIgetPolicyTemplateRequest
         */
        public APIgetPolicyTemplateRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set scope
         * @param scope Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)
         * @return APIgetPolicyTemplateRequest
         */
        public APIgetPolicyTemplateRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for getPolicyTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a specific Policy Template </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPolicyTemplateCall(code, asAt, scope, _callback);
        }

        /**
         * Execute getPolicyTemplate request
         * @return PolicyTemplateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a specific Policy Template </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyTemplateResponse execute() throws ApiException {
            ApiResponse<PolicyTemplateResponse> localVarResp = getPolicyTemplateWithHttpInfo(code, asAt, scope);
            return localVarResp.getData();
        }

        /**
         * Execute getPolicyTemplate request with HTTP info returned
         * @return ApiResponse&lt;PolicyTemplateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a specific Policy Template </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyTemplateResponse> executeWithHttpInfo() throws ApiException {
            return getPolicyTemplateWithHttpInfo(code, asAt, scope);
        }

        /**
         * Execute getPolicyTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a specific Policy Template </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyTemplateResponse> _callback) throws ApiException {
            return getPolicyTemplateAsync(code, asAt, scope, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] GetPolicyTemplate: Retrieving one Policy Template
     * Gets an identified Policy Template
     * @param code The code of the Policy Template (required)
     * @return APIgetPolicyTemplateRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific Policy Template </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPolicyTemplateRequest getPolicyTemplate(String code) {
        return new APIgetPolicyTemplateRequest(code);
    }
    private okhttp3.Call listPolicyTemplatesCall(OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policytemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPolicyTemplatesValidateBeforeCall(OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return listPolicyTemplatesCall(asAt, _callback);

    }


    private ApiResponse<List<PolicyTemplateResponse>> listPolicyTemplatesWithHttpInfo(OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = listPolicyTemplatesValidateBeforeCall(asAt, null);
        Type localVarReturnType = new TypeToken<List<PolicyTemplateResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPolicyTemplatesAsync(OffsetDateTime asAt, final ApiCallback<List<PolicyTemplateResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPolicyTemplatesValidateBeforeCall(asAt, _callback);
        Type localVarReturnType = new TypeToken<List<PolicyTemplateResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistPolicyTemplatesRequest {
        private OffsetDateTime asAt;

        private APIlistPolicyTemplatesRequest() {
        }

        /**
         * Set asAt
         * @param asAt Optional. The AsAt date time of the data (optional)
         * @return APIlistPolicyTemplatesRequest
         */
        public APIlistPolicyTemplatesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for listPolicyTemplates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Policy Templates </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPolicyTemplatesCall(asAt, _callback);
        }

        /**
         * Execute listPolicyTemplates request
         * @return List&lt;PolicyTemplateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Policy Templates </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<PolicyTemplateResponse> execute() throws ApiException {
            ApiResponse<List<PolicyTemplateResponse>> localVarResp = listPolicyTemplatesWithHttpInfo(asAt);
            return localVarResp.getData();
        }

        /**
         * Execute listPolicyTemplates request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PolicyTemplateResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Policy Templates </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PolicyTemplateResponse>> executeWithHttpInfo() throws ApiException {
            return listPolicyTemplatesWithHttpInfo(asAt);
        }

        /**
         * Execute listPolicyTemplates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Policy Templates </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PolicyTemplateResponse>> _callback) throws ApiException {
            return listPolicyTemplatesAsync(asAt, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] ListPolicyTemplates: List Policy Templates
     * Gets all Policy Templates with pagination support.
     * @return APIlistPolicyTemplatesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Policy Templates </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistPolicyTemplatesRequest listPolicyTemplates() {
        return new APIlistPolicyTemplatesRequest();
    }
    private okhttp3.Call updatePolicyTemplateCall(String code, PolicyTemplateUpdateRequest policyTemplateUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policyTemplateUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/policytemplates/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePolicyTemplateValidateBeforeCall(String code, PolicyTemplateUpdateRequest policyTemplateUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updatePolicyTemplate(Async)");
        }

        return updatePolicyTemplateCall(code, policyTemplateUpdateRequest, _callback);

    }


    private ApiResponse<PolicyTemplateResponse> updatePolicyTemplateWithHttpInfo(String code, PolicyTemplateUpdateRequest policyTemplateUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePolicyTemplateValidateBeforeCall(code, policyTemplateUpdateRequest, null);
        Type localVarReturnType = new TypeToken<PolicyTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePolicyTemplateAsync(String code, PolicyTemplateUpdateRequest policyTemplateUpdateRequest, final ApiCallback<PolicyTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePolicyTemplateValidateBeforeCall(code, policyTemplateUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<PolicyTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdatePolicyTemplateRequest {
        private final String code;
        private PolicyTemplateUpdateRequest policyTemplateUpdateRequest;

        private APIupdatePolicyTemplateRequest(String code) {
            this.code = code;
        }

        /**
         * Set policyTemplateUpdateRequest
         * @param policyTemplateUpdateRequest Definition of the updated policy template (optional)
         * @return APIupdatePolicyTemplateRequest
         */
        public APIupdatePolicyTemplateRequest policyTemplateUpdateRequest(PolicyTemplateUpdateRequest policyTemplateUpdateRequest) {
            this.policyTemplateUpdateRequest = policyTemplateUpdateRequest;
            return this;
        }

        /**
         * Build call for updatePolicyTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated Policy Template </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updatePolicyTemplateCall(code, policyTemplateUpdateRequest, _callback);
        }

        /**
         * Execute updatePolicyTemplate request
         * @return PolicyTemplateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated Policy Template </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PolicyTemplateResponse execute() throws ApiException {
            ApiResponse<PolicyTemplateResponse> localVarResp = updatePolicyTemplateWithHttpInfo(code, policyTemplateUpdateRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updatePolicyTemplate request with HTTP info returned
         * @return ApiResponse&lt;PolicyTemplateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated Policy Template </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyTemplateResponse> executeWithHttpInfo() throws ApiException {
            return updatePolicyTemplateWithHttpInfo(code, policyTemplateUpdateRequest);
        }

        /**
         * Execute updatePolicyTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updated Policy Template </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyTemplateResponse> _callback) throws ApiException {
            return updatePolicyTemplateAsync(code, policyTemplateUpdateRequest, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] UpdatePolicyTemplate: Update a Policy Template
     * Updates an identified Policy Template
     * @param code Code of the policy template to update (required)
     * @return APIupdatePolicyTemplateRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Policy Template </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdatePolicyTemplateRequest updatePolicyTemplate(String code) {
        return new APIupdatePolicyTemplateRequest(code);
    }
}
