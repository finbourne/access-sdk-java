/*
 * FINBOURNE Access Management API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.access.api;

import com.finbourne.access.ApiCallback;
import com.finbourne.access.ApiClient;
import com.finbourne.access.ApiException;
import com.finbourne.access.ApiResponse;
import com.finbourne.access.Configuration;
import com.finbourne.access.Pair;
import com.finbourne.access.ProgressRequestBody;
import com.finbourne.access.ProgressResponseBody;
import com.finbourne.access.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.access.model.AddPolicyCollectionToRoleRequest;
import com.finbourne.access.model.AddPolicyToRoleRequest;
import com.finbourne.access.model.LusidProblemDetails;
import com.finbourne.access.model.LusidValidationProblemDetails;
import com.finbourne.access.model.ResourceListOfUserRoleResponse;
import com.finbourne.access.model.UserRoleCreationRequest;
import com.finbourne.access.model.UserRoleResponse;
import com.finbourne.access.model.UserRoleUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserRolesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserRolesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserRolesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addPolicyCollectionToUserRoleCall(String userid, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, final ApiCallback _callback) throws ApiException {
        return addPolicyCollectionToUserRoleCall(userid, addPolicyCollectionToRoleRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call addPolicyCollectionToUserRoleCall(String userid, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addPolicyCollectionToRoleRequest;

        // create path and map variables
        String localVarPath = "/api/userroles/{userid}/policycollections"
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPolicyCollectionToUserRoleValidateBeforeCall(String userid, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling addPolicyCollectionToUserRole(Async)");
        }

        // verify the required parameter 'addPolicyCollectionToRoleRequest' is set
        if (addPolicyCollectionToRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'addPolicyCollectionToRoleRequest' when calling addPolicyCollectionToUserRole(Async)");
        }

        return addPolicyCollectionToUserRoleCall(userid, addPolicyCollectionToRoleRequest, _callback, opts);

    }


    private ApiResponse<UserRoleResponse> addPolicyCollectionToUserRoleWithHttpInfo(String userid, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = addPolicyCollectionToUserRoleValidateBeforeCall(userid, addPolicyCollectionToRoleRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UserRoleResponse> addPolicyCollectionToUserRoleWithHttpInfo(String userid, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = addPolicyCollectionToUserRoleValidateBeforeCall(userid, addPolicyCollectionToRoleRequest, null, opts);
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addPolicyCollectionToUserRoleAsync(String userid, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, final ApiCallback<UserRoleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPolicyCollectionToUserRoleValidateBeforeCall(userid, addPolicyCollectionToRoleRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call addPolicyCollectionToUserRoleAsync(String userid, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, final ApiCallback<UserRoleResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = addPolicyCollectionToUserRoleValidateBeforeCall(userid, addPolicyCollectionToRoleRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIaddPolicyCollectionToUserRoleRequest {
        private final String userid;
        private final AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest;

        private APIaddPolicyCollectionToUserRoleRequest(String userid, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest) {
            this.userid = userid;
            this.addPolicyCollectionToRoleRequest = addPolicyCollectionToRoleRequest;
        }

        /**
         * Build call for addPolicyCollectionToUserRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role with added policy collection. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addPolicyCollectionToUserRoleCall(userid, addPolicyCollectionToRoleRequest, _callback);
        }

        /**
         * Execute addPolicyCollectionToUserRole request
         * @return UserRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role with added policy collection. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UserRoleResponse execute() throws ApiException {
            ApiResponse<UserRoleResponse> localVarResp = addPolicyCollectionToUserRoleWithHttpInfo(userid, addPolicyCollectionToRoleRequest);
            return localVarResp.getData();
        }

        /**
         * Execute addPolicyCollectionToUserRole request. Use any specified configuration options to override any other configuration for this request only.
         * @return UserRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role with added policy collection. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UserRoleResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UserRoleResponse> localVarResp = addPolicyCollectionToUserRoleWithHttpInfo(userid, addPolicyCollectionToRoleRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute addPolicyCollectionToUserRole request with HTTP info returned
         * @return ApiResponse&lt;UserRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role with added policy collection. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserRoleResponse> executeWithHttpInfo() throws ApiException {
            return addPolicyCollectionToUserRoleWithHttpInfo(userid, addPolicyCollectionToRoleRequest);
        }

        /**
         * Execute addPolicyCollectionToUserRole request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UserRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role with added policy collection. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserRoleResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return addPolicyCollectionToUserRoleWithHttpInfo(userid, addPolicyCollectionToRoleRequest, opts);
        }

        /**
         * Execute addPolicyCollectionToUserRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role with added policy collection. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserRoleResponse> _callback) throws ApiException {
            return addPolicyCollectionToUserRoleAsync(userid, addPolicyCollectionToRoleRequest, _callback);
        }

        /**
         * Execute addPolicyCollectionToUserRole request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role with added policy collection. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserRoleResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return addPolicyCollectionToUserRoleAsync(userid, addPolicyCollectionToRoleRequest, _callback, opts);
        }
    }

    /**
     * AddPolicyCollectionToUserRole: Add a policy collection to a user-role
     * Adds a policy collection to a user-role.
     * @param userid Id of the User Role to get (required)
     * @param addPolicyCollectionToRoleRequest Dto of the policy collection to be added. (required)
     * @return APIaddPolicyCollectionToUserRoleRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User role with added policy collection. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIaddPolicyCollectionToUserRoleRequest addPolicyCollectionToUserRole(String userid, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest) {
        return new APIaddPolicyCollectionToUserRoleRequest(userid, addPolicyCollectionToRoleRequest);
    }
    private okhttp3.Call addPolicyToUserRoleCall(String userid, AddPolicyToRoleRequest addPolicyToRoleRequest, final ApiCallback _callback) throws ApiException {
        return addPolicyToUserRoleCall(userid, addPolicyToRoleRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call addPolicyToUserRoleCall(String userid, AddPolicyToRoleRequest addPolicyToRoleRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addPolicyToRoleRequest;

        // create path and map variables
        String localVarPath = "/api/userroles/{userid}/policies"
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPolicyToUserRoleValidateBeforeCall(String userid, AddPolicyToRoleRequest addPolicyToRoleRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling addPolicyToUserRole(Async)");
        }

        // verify the required parameter 'addPolicyToRoleRequest' is set
        if (addPolicyToRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'addPolicyToRoleRequest' when calling addPolicyToUserRole(Async)");
        }

        return addPolicyToUserRoleCall(userid, addPolicyToRoleRequest, _callback, opts);

    }


    private ApiResponse<UserRoleResponse> addPolicyToUserRoleWithHttpInfo(String userid, AddPolicyToRoleRequest addPolicyToRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = addPolicyToUserRoleValidateBeforeCall(userid, addPolicyToRoleRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UserRoleResponse> addPolicyToUserRoleWithHttpInfo(String userid, AddPolicyToRoleRequest addPolicyToRoleRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = addPolicyToUserRoleValidateBeforeCall(userid, addPolicyToRoleRequest, null, opts);
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addPolicyToUserRoleAsync(String userid, AddPolicyToRoleRequest addPolicyToRoleRequest, final ApiCallback<UserRoleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPolicyToUserRoleValidateBeforeCall(userid, addPolicyToRoleRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call addPolicyToUserRoleAsync(String userid, AddPolicyToRoleRequest addPolicyToRoleRequest, final ApiCallback<UserRoleResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = addPolicyToUserRoleValidateBeforeCall(userid, addPolicyToRoleRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIaddPolicyToUserRoleRequest {
        private final String userid;
        private final AddPolicyToRoleRequest addPolicyToRoleRequest;

        private APIaddPolicyToUserRoleRequest(String userid, AddPolicyToRoleRequest addPolicyToRoleRequest) {
            this.userid = userid;
            this.addPolicyToRoleRequest = addPolicyToRoleRequest;
        }

        /**
         * Build call for addPolicyToUserRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role with added policy collection. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addPolicyToUserRoleCall(userid, addPolicyToRoleRequest, _callback);
        }

        /**
         * Execute addPolicyToUserRole request
         * @return UserRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role with added policy collection. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UserRoleResponse execute() throws ApiException {
            ApiResponse<UserRoleResponse> localVarResp = addPolicyToUserRoleWithHttpInfo(userid, addPolicyToRoleRequest);
            return localVarResp.getData();
        }

        /**
         * Execute addPolicyToUserRole request. Use any specified configuration options to override any other configuration for this request only.
         * @return UserRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role with added policy collection. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UserRoleResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UserRoleResponse> localVarResp = addPolicyToUserRoleWithHttpInfo(userid, addPolicyToRoleRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute addPolicyToUserRole request with HTTP info returned
         * @return ApiResponse&lt;UserRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role with added policy collection. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserRoleResponse> executeWithHttpInfo() throws ApiException {
            return addPolicyToUserRoleWithHttpInfo(userid, addPolicyToRoleRequest);
        }

        /**
         * Execute addPolicyToUserRole request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UserRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role with added policy collection. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserRoleResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return addPolicyToUserRoleWithHttpInfo(userid, addPolicyToRoleRequest, opts);
        }

        /**
         * Execute addPolicyToUserRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role with added policy collection. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserRoleResponse> _callback) throws ApiException {
            return addPolicyToUserRoleAsync(userid, addPolicyToRoleRequest, _callback);
        }

        /**
         * Execute addPolicyToUserRole request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role with added policy collection. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserRoleResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return addPolicyToUserRoleAsync(userid, addPolicyToRoleRequest, _callback, opts);
        }
    }

    /**
     * AddPolicyToUserRole: Add a policy to a user-role
     * Adds a policy to a user-role.
     * @param userid Id of the User Role to get (required)
     * @param addPolicyToRoleRequest Dto of the policy to be added. (required)
     * @return APIaddPolicyToUserRoleRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User role with added policy collection. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIaddPolicyToUserRoleRequest addPolicyToUserRole(String userid, AddPolicyToRoleRequest addPolicyToRoleRequest) {
        return new APIaddPolicyToUserRoleRequest(userid, addPolicyToRoleRequest);
    }
    private okhttp3.Call createUserRoleCall(UserRoleCreationRequest userRoleCreationRequest, final ApiCallback _callback) throws ApiException {
        return createUserRoleCall(userRoleCreationRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createUserRoleCall(UserRoleCreationRequest userRoleCreationRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userRoleCreationRequest;

        // create path and map variables
        String localVarPath = "/api/userroles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserRoleValidateBeforeCall(UserRoleCreationRequest userRoleCreationRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'userRoleCreationRequest' is set
        if (userRoleCreationRequest == null) {
            throw new ApiException("Missing the required parameter 'userRoleCreationRequest' when calling createUserRole(Async)");
        }

        return createUserRoleCall(userRoleCreationRequest, _callback, opts);

    }


    private ApiResponse<UserRoleResponse> createUserRoleWithHttpInfo(UserRoleCreationRequest userRoleCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createUserRoleValidateBeforeCall(userRoleCreationRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UserRoleResponse> createUserRoleWithHttpInfo(UserRoleCreationRequest userRoleCreationRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createUserRoleValidateBeforeCall(userRoleCreationRequest, null, opts);
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createUserRoleAsync(UserRoleCreationRequest userRoleCreationRequest, final ApiCallback<UserRoleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserRoleValidateBeforeCall(userRoleCreationRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createUserRoleAsync(UserRoleCreationRequest userRoleCreationRequest, final ApiCallback<UserRoleResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createUserRoleValidateBeforeCall(userRoleCreationRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateUserRoleRequest {
        private final UserRoleCreationRequest userRoleCreationRequest;

        private APIcreateUserRoleRequest(UserRoleCreationRequest userRoleCreationRequest) {
            this.userRoleCreationRequest = userRoleCreationRequest;
        }

        /**
         * Build call for createUserRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role that has been created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createUserRoleCall(userRoleCreationRequest, _callback);
        }

        /**
         * Execute createUserRole request
         * @return UserRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role that has been created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UserRoleResponse execute() throws ApiException {
            ApiResponse<UserRoleResponse> localVarResp = createUserRoleWithHttpInfo(userRoleCreationRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createUserRole request. Use any specified configuration options to override any other configuration for this request only.
         * @return UserRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role that has been created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UserRoleResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UserRoleResponse> localVarResp = createUserRoleWithHttpInfo(userRoleCreationRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createUserRole request with HTTP info returned
         * @return ApiResponse&lt;UserRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role that has been created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserRoleResponse> executeWithHttpInfo() throws ApiException {
            return createUserRoleWithHttpInfo(userRoleCreationRequest);
        }

        /**
         * Execute createUserRole request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UserRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role that has been created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserRoleResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createUserRoleWithHttpInfo(userRoleCreationRequest, opts);
        }

        /**
         * Execute createUserRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role that has been created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserRoleResponse> _callback) throws ApiException {
            return createUserRoleAsync(userRoleCreationRequest, _callback);
        }

        /**
         * Execute createUserRole request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role that has been created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserRoleResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return createUserRoleAsync(userRoleCreationRequest, _callback, opts);
        }
    }

    /**
     * CreateUserRole: Create a user-role
     * Creates a new user-role.
     * @param userRoleCreationRequest Definition of the user-role to create. (required)
     * @return APIcreateUserRoleRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User role that has been created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateUserRoleRequest createUserRole(UserRoleCreationRequest userRoleCreationRequest) {
        return new APIcreateUserRoleRequest(userRoleCreationRequest);
    }
    private okhttp3.Call deleteUserRoleCall(String userid, final ApiCallback _callback) throws ApiException {
        return deleteUserRoleCall(userid,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteUserRoleCall(String userid, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/userroles/{userid}"
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserRoleValidateBeforeCall(String userid, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling deleteUserRole(Async)");
        }

        return deleteUserRoleCall(userid, _callback, opts);

    }


    private ApiResponse<Void> deleteUserRoleWithHttpInfo(String userid) throws ApiException {
        okhttp3.Call localVarCall = deleteUserRoleValidateBeforeCall(userid, null, new ConfigurationOptions());
        return localVarApiClient.execute(localVarCall);
    }

    private ApiResponse<Void> deleteUserRoleWithHttpInfo(String userid, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteUserRoleValidateBeforeCall(userid, null, opts);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteUserRoleAsync(String userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserRoleValidateBeforeCall(userid, _callback, new ConfigurationOptions());
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteUserRoleAsync(String userid, final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteUserRoleValidateBeforeCall(userid, _callback, opts);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteUserRoleRequest {
        private final String userid;

        private APIdeleteUserRoleRequest(String userid) {
            this.userid = userid;
        }

        /**
         * Build call for deleteUserRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteUserRoleCall(userid, _callback);
        }

        /**
         * Execute deleteUserRole request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteUserRoleWithHttpInfo(userid);
        }

        /**
         * Execute deleteUserRole request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute(ConfigurationOptions opts) throws ApiException {
            deleteUserRoleWithHttpInfo(userid, opts);
        }

        /**
         * Execute deleteUserRole request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteUserRoleWithHttpInfo(userid);
        }

        /**
         * Execute deleteUserRole request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteUserRoleWithHttpInfo(userid, opts);
        }

        /**
         * Execute deleteUserRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteUserRoleAsync(userid, _callback);
        }

        /**
         * Execute deleteUserRole request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteUserRoleAsync(userid, _callback, opts);
        }
    }

    /**
     * DeleteUserRole: Delete a user-role
     * Deletes an identified user-role.
     * @param userid Id of the user-role to delete. (required)
     * @return APIdeleteUserRoleRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteUserRoleRequest deleteUserRole(String userid) {
        return new APIdeleteUserRoleRequest(userid);
    }
    private okhttp3.Call getUserRoleCall(String userid, final ApiCallback _callback) throws ApiException {
        return getUserRoleCall(userid,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getUserRoleCall(String userid, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/userroles/{userid}"
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserRoleValidateBeforeCall(String userid, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling getUserRole(Async)");
        }

        return getUserRoleCall(userid, _callback, opts);

    }


    private ApiResponse<UserRoleResponse> getUserRoleWithHttpInfo(String userid) throws ApiException {
        okhttp3.Call localVarCall = getUserRoleValidateBeforeCall(userid, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UserRoleResponse> getUserRoleWithHttpInfo(String userid, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getUserRoleValidateBeforeCall(userid, null, opts);
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserRoleAsync(String userid, final ApiCallback<UserRoleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserRoleValidateBeforeCall(userid, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getUserRoleAsync(String userid, final ApiCallback<UserRoleResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getUserRoleValidateBeforeCall(userid, _callback, opts);
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetUserRoleRequest {
        private final String userid;

        private APIgetUserRoleRequest(String userid) {
            this.userid = userid;
        }

        /**
         * Build call for getUserRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested user role. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserRoleCall(userid, _callback);
        }

        /**
         * Execute getUserRole request
         * @return UserRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested user role. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UserRoleResponse execute() throws ApiException {
            ApiResponse<UserRoleResponse> localVarResp = getUserRoleWithHttpInfo(userid);
            return localVarResp.getData();
        }

        /**
         * Execute getUserRole request. Use any specified configuration options to override any other configuration for this request only.
         * @return UserRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested user role. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UserRoleResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UserRoleResponse> localVarResp = getUserRoleWithHttpInfo(userid, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getUserRole request with HTTP info returned
         * @return ApiResponse&lt;UserRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested user role. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserRoleResponse> executeWithHttpInfo() throws ApiException {
            return getUserRoleWithHttpInfo(userid);
        }

        /**
         * Execute getUserRole request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UserRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested user role. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserRoleResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getUserRoleWithHttpInfo(userid, opts);
        }

        /**
         * Execute getUserRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested user role. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserRoleResponse> _callback) throws ApiException {
            return getUserRoleAsync(userid, _callback);
        }

        /**
         * Execute getUserRole request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested user role. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserRoleResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return getUserRoleAsync(userid, _callback, opts);
        }
    }

    /**
     * GetUserRole: Get a user-role
     * Get an identified user-role.
     * @param userid Id of the user-role to get. (required)
     * @return APIgetUserRoleRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested user role. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetUserRoleRequest getUserRole(String userid) {
        return new APIgetUserRoleRequest(userid);
    }
    private okhttp3.Call listUserRolesCall(String filter, String sortBy, Integer limit, String page, final ApiCallback _callback) throws ApiException {
        return listUserRolesCall(filter, sortBy, limit, page,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listUserRolesCall(String filter, String sortBy, Integer limit, String page, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/userroles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserRolesValidateBeforeCall(String filter, String sortBy, Integer limit, String page, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listUserRolesCall(filter, sortBy, limit, page, _callback, opts);

    }


    private ApiResponse<ResourceListOfUserRoleResponse> listUserRolesWithHttpInfo(String filter, String sortBy, Integer limit, String page) throws ApiException {
        okhttp3.Call localVarCall = listUserRolesValidateBeforeCall(filter, sortBy, limit, page, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfUserRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfUserRoleResponse> listUserRolesWithHttpInfo(String filter, String sortBy, Integer limit, String page, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listUserRolesValidateBeforeCall(filter, sortBy, limit, page, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfUserRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserRolesAsync(String filter, String sortBy, Integer limit, String page, final ApiCallback<ResourceListOfUserRoleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserRolesValidateBeforeCall(filter, sortBy, limit, page, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfUserRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listUserRolesAsync(String filter, String sortBy, Integer limit, String page, final ApiCallback<ResourceListOfUserRoleResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listUserRolesValidateBeforeCall(filter, sortBy, limit, page, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfUserRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistUserRolesRequest {
        private String filter;
        private String sortBy;
        private Integer limit;
        private String page;

        private APIlistUserRolesRequest() {
        }

        /**
         * Set filter
         * @param filter Optional. Expression to filter the result set (optional)
         * @return APIlistUserRolesRequest
         */
        public APIlistUserRolesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
         * @return APIlistUserRolesRequest
         */
        public APIlistUserRolesRequest sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set limit
         * @param limit Optional. When paginating, limit the number of returned results to this many. (optional)
         * @return APIlistUserRolesRequest
         */
        public APIlistUserRolesRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page Optional. Encoded page string returned from a previous search result that will retrieve  the next page of data. (optional)
         * @return APIlistUserRolesRequest
         */
        public APIlistUserRolesRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Build call for listUserRoles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserRolesCall(filter, sortBy, limit, page, _callback);
        }

        /**
         * Execute listUserRoles request
         * @return ResourceListOfUserRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfUserRoleResponse execute() throws ApiException {
            ApiResponse<ResourceListOfUserRoleResponse> localVarResp = listUserRolesWithHttpInfo(filter, sortBy, limit, page);
            return localVarResp.getData();
        }

        /**
         * Execute listUserRoles request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfUserRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfUserRoleResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfUserRoleResponse> localVarResp = listUserRolesWithHttpInfo(filter, sortBy, limit, page, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listUserRoles request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfUserRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfUserRoleResponse> executeWithHttpInfo() throws ApiException {
            return listUserRolesWithHttpInfo(filter, sortBy, limit, page);
        }

        /**
         * Execute listUserRoles request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfUserRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfUserRoleResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listUserRolesWithHttpInfo(filter, sortBy, limit, page, opts);
        }

        /**
         * Execute listUserRoles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfUserRoleResponse> _callback) throws ApiException {
            return listUserRolesAsync(filter, sortBy, limit, page, _callback);
        }

        /**
         * Execute listUserRoles request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfUserRoleResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return listUserRolesAsync(filter, sortBy, limit, page, _callback, opts);
        }
    }

    /**
     * ListUserRoles: List user-roles
     * Lists all user-roles and pages.
     * @return APIlistUserRolesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistUserRolesRequest listUserRoles() {
        return new APIlistUserRolesRequest();
    }
    private okhttp3.Call removePolicyCollectionFromUserRoleCall(String userid, String policyCollectionScope, String policyCollectionCode, final ApiCallback _callback) throws ApiException {
        return removePolicyCollectionFromUserRoleCall(userid, policyCollectionScope, policyCollectionCode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call removePolicyCollectionFromUserRoleCall(String userid, String policyCollectionScope, String policyCollectionCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/userroles/{userid}/policycollections/{policyCollectionScope}/{policyCollectionCode}"
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()))
            .replace("{" + "policyCollectionScope" + "}", localVarApiClient.escapeString(policyCollectionScope.toString()))
            .replace("{" + "policyCollectionCode" + "}", localVarApiClient.escapeString(policyCollectionCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePolicyCollectionFromUserRoleValidateBeforeCall(String userid, String policyCollectionScope, String policyCollectionCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling removePolicyCollectionFromUserRole(Async)");
        }

        // verify the required parameter 'policyCollectionScope' is set
        if (policyCollectionScope == null) {
            throw new ApiException("Missing the required parameter 'policyCollectionScope' when calling removePolicyCollectionFromUserRole(Async)");
        }

        // verify the required parameter 'policyCollectionCode' is set
        if (policyCollectionCode == null) {
            throw new ApiException("Missing the required parameter 'policyCollectionCode' when calling removePolicyCollectionFromUserRole(Async)");
        }

        return removePolicyCollectionFromUserRoleCall(userid, policyCollectionScope, policyCollectionCode, _callback, opts);

    }


    private ApiResponse<Void> removePolicyCollectionFromUserRoleWithHttpInfo(String userid, String policyCollectionScope, String policyCollectionCode) throws ApiException {
        okhttp3.Call localVarCall = removePolicyCollectionFromUserRoleValidateBeforeCall(userid, policyCollectionScope, policyCollectionCode, null, new ConfigurationOptions());
        return localVarApiClient.execute(localVarCall);
    }

    private ApiResponse<Void> removePolicyCollectionFromUserRoleWithHttpInfo(String userid, String policyCollectionScope, String policyCollectionCode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = removePolicyCollectionFromUserRoleValidateBeforeCall(userid, policyCollectionScope, policyCollectionCode, null, opts);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removePolicyCollectionFromUserRoleAsync(String userid, String policyCollectionScope, String policyCollectionCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePolicyCollectionFromUserRoleValidateBeforeCall(userid, policyCollectionScope, policyCollectionCode, _callback, new ConfigurationOptions());
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    private okhttp3.Call removePolicyCollectionFromUserRoleAsync(String userid, String policyCollectionScope, String policyCollectionCode, final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = removePolicyCollectionFromUserRoleValidateBeforeCall(userid, policyCollectionScope, policyCollectionCode, _callback, opts);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIremovePolicyCollectionFromUserRoleRequest {
        private final String userid;
        private final String policyCollectionScope;
        private final String policyCollectionCode;

        private APIremovePolicyCollectionFromUserRoleRequest(String userid, String policyCollectionScope, String policyCollectionCode) {
            this.userid = userid;
            this.policyCollectionScope = policyCollectionScope;
            this.policyCollectionCode = policyCollectionCode;
        }

        /**
         * Build call for removePolicyCollectionFromUserRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removePolicyCollectionFromUserRoleCall(userid, policyCollectionScope, policyCollectionCode, _callback);
        }

        /**
         * Execute removePolicyCollectionFromUserRole request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removePolicyCollectionFromUserRoleWithHttpInfo(userid, policyCollectionScope, policyCollectionCode);
        }

        /**
         * Execute removePolicyCollectionFromUserRole request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute(ConfigurationOptions opts) throws ApiException {
            removePolicyCollectionFromUserRoleWithHttpInfo(userid, policyCollectionScope, policyCollectionCode, opts);
        }

        /**
         * Execute removePolicyCollectionFromUserRole request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removePolicyCollectionFromUserRoleWithHttpInfo(userid, policyCollectionScope, policyCollectionCode);
        }

        /**
         * Execute removePolicyCollectionFromUserRole request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return removePolicyCollectionFromUserRoleWithHttpInfo(userid, policyCollectionScope, policyCollectionCode, opts);
        }

        /**
         * Execute removePolicyCollectionFromUserRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removePolicyCollectionFromUserRoleAsync(userid, policyCollectionScope, policyCollectionCode, _callback);
        }

        /**
         * Execute removePolicyCollectionFromUserRole request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {
            return removePolicyCollectionFromUserRoleAsync(userid, policyCollectionScope, policyCollectionCode, _callback, opts);
        }
    }

    /**
     * RemovePolicyCollectionFromUserRole: Remove a policy collection from a user-role
     * Removes a policy collection from a user-role.
     * @param userid Id of the User Role to get (required)
     * @param policyCollectionScope The scope of policy collection to remove from the User Role (required)
     * @param policyCollectionCode The code of the policy collection to remove from the User Role (required)
     * @return APIremovePolicyCollectionFromUserRoleRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIremovePolicyCollectionFromUserRoleRequest removePolicyCollectionFromUserRole(String userid, String policyCollectionScope, String policyCollectionCode) {
        return new APIremovePolicyCollectionFromUserRoleRequest(userid, policyCollectionScope, policyCollectionCode);
    }
    private okhttp3.Call removePolicyFromUserRoleCall(String userid, String policyScope, String policyCode, final ApiCallback _callback) throws ApiException {
        return removePolicyFromUserRoleCall(userid, policyScope, policyCode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call removePolicyFromUserRoleCall(String userid, String policyScope, String policyCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/userroles/{userid}/policies/{policyScope}/{policyCode}"
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()))
            .replace("{" + "policyScope" + "}", localVarApiClient.escapeString(policyScope.toString()))
            .replace("{" + "policyCode" + "}", localVarApiClient.escapeString(policyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePolicyFromUserRoleValidateBeforeCall(String userid, String policyScope, String policyCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling removePolicyFromUserRole(Async)");
        }

        // verify the required parameter 'policyScope' is set
        if (policyScope == null) {
            throw new ApiException("Missing the required parameter 'policyScope' when calling removePolicyFromUserRole(Async)");
        }

        // verify the required parameter 'policyCode' is set
        if (policyCode == null) {
            throw new ApiException("Missing the required parameter 'policyCode' when calling removePolicyFromUserRole(Async)");
        }

        return removePolicyFromUserRoleCall(userid, policyScope, policyCode, _callback, opts);

    }


    private ApiResponse<Void> removePolicyFromUserRoleWithHttpInfo(String userid, String policyScope, String policyCode) throws ApiException {
        okhttp3.Call localVarCall = removePolicyFromUserRoleValidateBeforeCall(userid, policyScope, policyCode, null, new ConfigurationOptions());
        return localVarApiClient.execute(localVarCall);
    }

    private ApiResponse<Void> removePolicyFromUserRoleWithHttpInfo(String userid, String policyScope, String policyCode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = removePolicyFromUserRoleValidateBeforeCall(userid, policyScope, policyCode, null, opts);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removePolicyFromUserRoleAsync(String userid, String policyScope, String policyCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePolicyFromUserRoleValidateBeforeCall(userid, policyScope, policyCode, _callback, new ConfigurationOptions());
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    private okhttp3.Call removePolicyFromUserRoleAsync(String userid, String policyScope, String policyCode, final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = removePolicyFromUserRoleValidateBeforeCall(userid, policyScope, policyCode, _callback, opts);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIremovePolicyFromUserRoleRequest {
        private final String userid;
        private final String policyScope;
        private final String policyCode;

        private APIremovePolicyFromUserRoleRequest(String userid, String policyScope, String policyCode) {
            this.userid = userid;
            this.policyScope = policyScope;
            this.policyCode = policyCode;
        }

        /**
         * Build call for removePolicyFromUserRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removePolicyFromUserRoleCall(userid, policyScope, policyCode, _callback);
        }

        /**
         * Execute removePolicyFromUserRole request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removePolicyFromUserRoleWithHttpInfo(userid, policyScope, policyCode);
        }

        /**
         * Execute removePolicyFromUserRole request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute(ConfigurationOptions opts) throws ApiException {
            removePolicyFromUserRoleWithHttpInfo(userid, policyScope, policyCode, opts);
        }

        /**
         * Execute removePolicyFromUserRole request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removePolicyFromUserRoleWithHttpInfo(userid, policyScope, policyCode);
        }

        /**
         * Execute removePolicyFromUserRole request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return removePolicyFromUserRoleWithHttpInfo(userid, policyScope, policyCode, opts);
        }

        /**
         * Execute removePolicyFromUserRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removePolicyFromUserRoleAsync(userid, policyScope, policyCode, _callback);
        }

        /**
         * Execute removePolicyFromUserRole request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {
            return removePolicyFromUserRoleAsync(userid, policyScope, policyCode, _callback, opts);
        }
    }

    /**
     * RemovePolicyFromUserRole: Remove a policy from a user-role
     * Removes a policy from a user-role.
     * @param userid Id of the User Role to get (required)
     * @param policyScope The scope of the policy to remove from the User Role (required)
     * @param policyCode The code of the policy to remove from the User Role (required)
     * @return APIremovePolicyFromUserRoleRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIremovePolicyFromUserRoleRequest removePolicyFromUserRole(String userid, String policyScope, String policyCode) {
        return new APIremovePolicyFromUserRoleRequest(userid, policyScope, policyCode);
    }
    private okhttp3.Call updateUserRoleCall(String userid, UserRoleUpdateRequest userRoleUpdateRequest, final ApiCallback _callback) throws ApiException {
        return updateUserRoleCall(userid, userRoleUpdateRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateUserRoleCall(String userid, UserRoleUpdateRequest userRoleUpdateRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userRoleUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/userroles/{userid}/update"
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserRoleValidateBeforeCall(String userid, UserRoleUpdateRequest userRoleUpdateRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling updateUserRole(Async)");
        }

        // verify the required parameter 'userRoleUpdateRequest' is set
        if (userRoleUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'userRoleUpdateRequest' when calling updateUserRole(Async)");
        }

        return updateUserRoleCall(userid, userRoleUpdateRequest, _callback, opts);

    }


    private ApiResponse<UserRoleResponse> updateUserRoleWithHttpInfo(String userid, UserRoleUpdateRequest userRoleUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserRoleValidateBeforeCall(userid, userRoleUpdateRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UserRoleResponse> updateUserRoleWithHttpInfo(String userid, UserRoleUpdateRequest userRoleUpdateRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateUserRoleValidateBeforeCall(userid, userRoleUpdateRequest, null, opts);
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserRoleAsync(String userid, UserRoleUpdateRequest userRoleUpdateRequest, final ApiCallback<UserRoleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserRoleValidateBeforeCall(userid, userRoleUpdateRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateUserRoleAsync(String userid, UserRoleUpdateRequest userRoleUpdateRequest, final ApiCallback<UserRoleResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateUserRoleValidateBeforeCall(userid, userRoleUpdateRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<UserRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateUserRoleRequest {
        private final String userid;
        private final UserRoleUpdateRequest userRoleUpdateRequest;

        private APIupdateUserRoleRequest(String userid, UserRoleUpdateRequest userRoleUpdateRequest) {
            this.userid = userid;
            this.userRoleUpdateRequest = userRoleUpdateRequest;
        }

        /**
         * Build call for updateUserRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role that has been updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateUserRoleCall(userid, userRoleUpdateRequest, _callback);
        }

        /**
         * Execute updateUserRole request
         * @return UserRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role that has been updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UserRoleResponse execute() throws ApiException {
            ApiResponse<UserRoleResponse> localVarResp = updateUserRoleWithHttpInfo(userid, userRoleUpdateRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateUserRole request. Use any specified configuration options to override any other configuration for this request only.
         * @return UserRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role that has been updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UserRoleResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UserRoleResponse> localVarResp = updateUserRoleWithHttpInfo(userid, userRoleUpdateRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateUserRole request with HTTP info returned
         * @return ApiResponse&lt;UserRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role that has been updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserRoleResponse> executeWithHttpInfo() throws ApiException {
            return updateUserRoleWithHttpInfo(userid, userRoleUpdateRequest);
        }

        /**
         * Execute updateUserRole request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UserRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role that has been updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserRoleResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateUserRoleWithHttpInfo(userid, userRoleUpdateRequest, opts);
        }

        /**
         * Execute updateUserRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role that has been updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserRoleResponse> _callback) throws ApiException {
            return updateUserRoleAsync(userid, userRoleUpdateRequest, _callback);
        }

        /**
         * Execute updateUserRole request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User role that has been updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserRoleResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return updateUserRoleAsync(userid, userRoleUpdateRequest, _callback, opts);
        }
    }

    /**
     * UpdateUserRole: Update a user-role
     * Updates an identified user-role.
     * @param userid Id of the user-role to be updated. (required)
     * @param userRoleUpdateRequest Definition of the update to apply to the user-role. (required)
     * @return APIupdateUserRoleRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User role that has been updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateUserRoleRequest updateUserRole(String userid, UserRoleUpdateRequest userRoleUpdateRequest) {
        return new APIupdateUserRoleRequest(userid, userRoleUpdateRequest);
    }
}
