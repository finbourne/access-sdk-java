/*
 * FINBOURNE Access Management API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.access.model;

import java.util.Objects;
import com.finbourne.access.model.IdSelectorDefinition;
import com.finbourne.access.model.MatchAllSelectorDefinition;
import com.finbourne.access.model.MetadataSelectorDefinition;
import com.finbourne.access.model.PolicySelectorDefinition;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.access.JSON;

/**
 * SelectorDefinition
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SelectorDefinition {
  public static final String SERIALIZED_NAME_METADATA_SELECTOR_DEFINITION = "metadataSelectorDefinition";
  @SerializedName(SERIALIZED_NAME_METADATA_SELECTOR_DEFINITION)
  private MetadataSelectorDefinition metadataSelectorDefinition;

  public static final String SERIALIZED_NAME_ID_SELECTOR_DEFINITION = "idSelectorDefinition";
  @SerializedName(SERIALIZED_NAME_ID_SELECTOR_DEFINITION)
  private IdSelectorDefinition idSelectorDefinition;

  public static final String SERIALIZED_NAME_MATCH_ALL_SELECTOR_DEFINITION = "matchAllSelectorDefinition";
  @SerializedName(SERIALIZED_NAME_MATCH_ALL_SELECTOR_DEFINITION)
  private MatchAllSelectorDefinition matchAllSelectorDefinition;

  public static final String SERIALIZED_NAME_POLICY_SELECTOR_DEFINITION = "policySelectorDefinition";
  @SerializedName(SERIALIZED_NAME_POLICY_SELECTOR_DEFINITION)
  private PolicySelectorDefinition policySelectorDefinition;

  public SelectorDefinition() {
  }

  public SelectorDefinition metadataSelectorDefinition(MetadataSelectorDefinition metadataSelectorDefinition) {
    
    this.metadataSelectorDefinition = metadataSelectorDefinition;
    return this;
  }

   /**
   * Get metadataSelectorDefinition
   * @return metadataSelectorDefinition
  **/
  @jakarta.annotation.Nullable
  public MetadataSelectorDefinition getMetadataSelectorDefinition() {
    return metadataSelectorDefinition;
  }


  public void setMetadataSelectorDefinition(MetadataSelectorDefinition metadataSelectorDefinition) {
    this.metadataSelectorDefinition = metadataSelectorDefinition;
  }


  public SelectorDefinition idSelectorDefinition(IdSelectorDefinition idSelectorDefinition) {
    
    this.idSelectorDefinition = idSelectorDefinition;
    return this;
  }

   /**
   * Get idSelectorDefinition
   * @return idSelectorDefinition
  **/
  @jakarta.annotation.Nullable
  public IdSelectorDefinition getIdSelectorDefinition() {
    return idSelectorDefinition;
  }


  public void setIdSelectorDefinition(IdSelectorDefinition idSelectorDefinition) {
    this.idSelectorDefinition = idSelectorDefinition;
  }


  public SelectorDefinition matchAllSelectorDefinition(MatchAllSelectorDefinition matchAllSelectorDefinition) {
    
    this.matchAllSelectorDefinition = matchAllSelectorDefinition;
    return this;
  }

   /**
   * Get matchAllSelectorDefinition
   * @return matchAllSelectorDefinition
  **/
  @jakarta.annotation.Nullable
  public MatchAllSelectorDefinition getMatchAllSelectorDefinition() {
    return matchAllSelectorDefinition;
  }


  public void setMatchAllSelectorDefinition(MatchAllSelectorDefinition matchAllSelectorDefinition) {
    this.matchAllSelectorDefinition = matchAllSelectorDefinition;
  }


  public SelectorDefinition policySelectorDefinition(PolicySelectorDefinition policySelectorDefinition) {
    
    this.policySelectorDefinition = policySelectorDefinition;
    return this;
  }

   /**
   * Get policySelectorDefinition
   * @return policySelectorDefinition
  **/
  @jakarta.annotation.Nullable
  public PolicySelectorDefinition getPolicySelectorDefinition() {
    return policySelectorDefinition;
  }


  public void setPolicySelectorDefinition(PolicySelectorDefinition policySelectorDefinition) {
    this.policySelectorDefinition = policySelectorDefinition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SelectorDefinition selectorDefinition = (SelectorDefinition) o;
    return Objects.equals(this.metadataSelectorDefinition, selectorDefinition.metadataSelectorDefinition) &&
        Objects.equals(this.idSelectorDefinition, selectorDefinition.idSelectorDefinition) &&
        Objects.equals(this.matchAllSelectorDefinition, selectorDefinition.matchAllSelectorDefinition) &&
        Objects.equals(this.policySelectorDefinition, selectorDefinition.policySelectorDefinition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadataSelectorDefinition, idSelectorDefinition, matchAllSelectorDefinition, policySelectorDefinition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SelectorDefinition {\n");
    sb.append("    metadataSelectorDefinition: ").append(toIndentedString(metadataSelectorDefinition)).append("\n");
    sb.append("    idSelectorDefinition: ").append(toIndentedString(idSelectorDefinition)).append("\n");
    sb.append("    matchAllSelectorDefinition: ").append(toIndentedString(matchAllSelectorDefinition)).append("\n");
    sb.append("    policySelectorDefinition: ").append(toIndentedString(policySelectorDefinition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metadataSelectorDefinition");
    openapiFields.add("idSelectorDefinition");
    openapiFields.add("matchAllSelectorDefinition");
    openapiFields.add("policySelectorDefinition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SelectorDefinition
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SelectorDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SelectorDefinition is not found in the empty JSON string", SelectorDefinition.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `metadataSelectorDefinition`
      if (jsonObj.get("metadataSelectorDefinition") != null && !jsonObj.get("metadataSelectorDefinition").isJsonNull()) {
        MetadataSelectorDefinition.validateJsonElement(jsonObj.get("metadataSelectorDefinition"));
      }
      // validate the optional field `idSelectorDefinition`
      if (jsonObj.get("idSelectorDefinition") != null && !jsonObj.get("idSelectorDefinition").isJsonNull()) {
        IdSelectorDefinition.validateJsonElement(jsonObj.get("idSelectorDefinition"));
      }
      // validate the optional field `matchAllSelectorDefinition`
      if (jsonObj.get("matchAllSelectorDefinition") != null && !jsonObj.get("matchAllSelectorDefinition").isJsonNull()) {
        MatchAllSelectorDefinition.validateJsonElement(jsonObj.get("matchAllSelectorDefinition"));
      }
      // validate the optional field `policySelectorDefinition`
      if (jsonObj.get("policySelectorDefinition") != null && !jsonObj.get("policySelectorDefinition").isJsonNull()) {
        PolicySelectorDefinition.validateJsonElement(jsonObj.get("policySelectorDefinition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SelectorDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SelectorDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SelectorDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SelectorDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<SelectorDefinition>() {
           @Override
           public void write(JsonWriter out, SelectorDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SelectorDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SelectorDefinition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SelectorDefinition
  * @throws IOException if the JSON string is invalid with respect to SelectorDefinition
  */
  public static SelectorDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SelectorDefinition.class);
  }

 /**
  * Convert an instance of SelectorDefinition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
